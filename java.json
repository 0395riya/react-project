[{"data":{"ques":"Q1. What is a cookie ?Q2. Can we reduce the visibility of the overridden method ?Q3. What are different types of inner classes ?Q4. Difference between TreeMap and HashMap ?Q5. What is the difference between List, Set and Map ?Q6. Difference between Public, Private, Default and Protected ?Q7. What is servlet Chaining ?Q8. What are the Wrapper classes available for primitive types ?Q9. What are concepts introduced with Java 5 ?Q10. Does Constructor creates the object ?Q11. Can static method access instance variables ?Q12. Does Java support Multiple Inheritance ?Q13. Difference between == and .equals() ?Q14. Difference between Checked and Unchecked exceptions ?Q15. What is a Final Variable ?Q16. Which class does not override the equals() and hashCode() methods, inheriting them directly from class Object?Q17. What is a final method ?Q18. Which interface does java.util.Hashtable implement?Q19. What is an Iterator?Q20. Which interface provides the capability to store objects using a key-value pair?Q21. Difference between HashMap and Hashtable?Q22. Does java allow overriding static methods ?Q23. When are static variables loaded in memory ?Q24. Can we serialize static variables ?Q25. What will this code print ?String a = new String (\"TEST\");String b = new String (\"TEST\");if(a == b) { System.out.println (\"TRUE\"); } else { System.out.println (\"FALSE\"); }Q26. There are two objects a and b with same hashcode. I am inserting these two objects inside a hashmap.hMap.put(a,a);hMap.put(b,b);where a.hashCode()==b.hashCode()Now tell me how many objects will be there inside the hashmap?Q27. Difference between long.Class and Long.TYPE ?Q28. Does Java provides default copy constructor ?Q29. What are the common uses of \"this\" keyword in java ?Q30. What are the difference between Threads and Processes ?Q31. How can we run a java program without making any object?Q32. Explain multithreading in Java ?Q33. Can constructors be synchronized in Java ?Q34. can we create a null as a key for a map collection ?Q35. What is the use of hashcode in Java ?Q36. Why java doesn't support multiple Inheritence ?Q37. Why threads block or enters to waiting state on I/O?Q38. What are transient variables in java?Q39. What is the difference between yield() and sleep()?Q40. What are wrapper classes ?Q41. What is the difference between time slicing and preemptive scheduling ?Q42. What is the initial state of a thread when it is created and started?Q43. What one should take care of, while serializing the object?Q44. What is a String Pool ?Q45. Why is String immutable in Java ?Q46. what is the use of cookie and session ? and What is the difference between them ?Q47. Which are the different segments of memory ?Q48. Which memory segment loads the java code ?Q49. which containers use a border Layout as their default layout ?Q50. Can a lock be acquired on a class ?Q51. What state does a thread enter when it terminates its processing?Q52. How many bits are used to represent Unicode, ASCII, UTF-16, and UTF-8 characters?Q53. Does garbage collection guarantee that a program will not run out of memory?Q54. What is an object's lock and which object's have locks?Q55. What is casting?Q56. What restrictions are placed on method overriding?Q57. How does a try statement determine which catch clause should be used to handle an exception?Q58. Describe what happens when an object is created in Java ?Q59. What is the difference between StringBuffer and String class ?Q60. Describe, in general, how java's garbage collector works ?Q61. What is RMI ?Q62. What is JDBC? Describe the steps needed to execute a SQL query using JDBC.Q63. Are constructors inherited? Can a subclass call the parent's class constructor? When?Q64. What is JSON ?Q65. What is the role of JSON.stringify ?Q66. When were Enums introduced in Java ?Q67. Which function is used to convert a JSON text into an object ?Q68. Which data types are supported by JSON ?Q69. What are the benefits of JSON over XML ?Q70. What are the methods of Object Class ?Q71. Explain JMS ( Java Messaging Services ) ?Q72. Explain EJB (Enterprise Java Beans) ?Q73. Which MVC is struts2 based on ?Q74. What is an API ( Application Programming Interface ) ?Q75. What is URL?Q76. Explain features of struts2 ?Q77. What is HTTP ?Q78. what is content negotiation?Q79. Is tomcat an application or Web server ?Q80. Is Apache an application or Web server ?Q81. What are the default or implicitly assigned values for data types in java ?Q82. What is difference between Encapsulation And Abstraction?Q83. Can I import same package/class twice? Will the JVM load the package twice at runtime?Q84. Explain static blocks in Java ?Q85. Which access specifier can be used with Class ?Q86. Explain Annotations ?Q87. Give an Example of Annotations ?Q88. What are few of the Annotations pre defined by Java?Q89. What are meta Annotations ?Q90. Name few meta-annotations ?Q91. How to display and set the Class path in Unix ?Q92. Difference between Abstract and Concrete Class ?Q93. Difference between Overloading and Overriding ?Q94. Difference between Vector and ArrayList ?Q95. Different ways of implementing Threads in Java ?Q96. What is Volatile keyword used for ?Q97. What is Serialization ?Q98. What is the use of Transient Keyword ?Q99. What is a final variable ?Q100. What is a Final Method ?Q101. What is a Final Class ?Q102. What is an Immutable Object ?Q103. What is an immutable class ?Q104. How to implement an immutable class ?Q105. Does Declaring an object \"final\" makes it immutable ?Q106. Difference between object instantiation and construction ?Q107. Can we override static methods ? Why ?Q108. Can we access instance variables within static methods ?Q109. Can we reduce the visibility of the inherited or overridden method ?Q110. Give an Example of checked and unchecked exception ?Q111. Name few Java Exceptions ?Q112. Which of the following is tightly bound ? Inheritance or Composition ?Q113. How can we make sure that a code segment gets executed even in case of uncatched exceptions ?Q114. Explain the use of \"Native\" keyword ?Q115. What is \"super\" used for ?Q116. What is \"this\" keyword used for ?Q117. Difference between boolean and Boolean ?Q118. What is a finalize method ?Q119. What are Marker Interfaces ? Name few Java marker interfaces ?Q120. Is runnable a Marker interface ?Q121. Difference between Process and Thread ?Q122. What is a Deadlock ?Q123. Difference between Serialization and Deserialization ?Q124. Explain Autoboxing ?Q125. What is an Enum type ?Q126. What are Wrapper Classes ? What are Primitive Wrapper Classes ?Q127. What Design pattern Wrapper Classes implement ?Q128. What is \"Import\" used for ?Q129. Different types of memory used by JVM ?Q130. What is a class loader ? What are the different class loaders used by JVM ?Q131. Can we declare interface methods as private ?Q132. What is a Static import ?Q133. Difference between StringBuffer and StringBuilder ?Q134. Difference between Map and HashMap ?Q135. What is a Property class ?Q136. Explain the scenerios to choose between String , StringBuilder and StringBuffer ?Q137. Explain java.lang.OutOfMemoryError ?Q138. Can we have multiple servlets in a web application and How can we do that ?Q139. How can we manage Error Messages in the web application ?Q140. Is JVM, a compiler or interpretor ?Q141. Difference between implicit and explicit type casting ?Q142. Difference between loadClass and Class.forName ?Q143. Should we override finalize method ?Q144. What is assert keyword used for ?Q145. Difference between Factory and Abstract Factory Design Pattern ?Q146. Difference between Factory and Builder Design Pattern ?Q147. Difference between Proxy and Adapter ?Q148. Difference between Adapter and Facade ?Q149. Difference between Builder and Composite ?Q150. Example of Chain of Responsibility Design Pattern ?Q151. Example of Observer Design Pattern ?Q152. Difference between Factory and Strategy Design Pattern ?Q153. Shall we use abstract classes or Interfaces in Policy / Strategy Design Pattern ?Q154. Which kind of memory is used for storing object member variables and function local variables ?Q155. Why do member variables have default values whereas local variables don't have any default value ?Q156. What is a Default Constructor ?Q157. Will Compiler creates a default no argument constructor if we specify only multi argument constructor ?Q158. Can we overload constructors ?Q159. What will happen if we make the constructor private ?Q160. How can we create objects if we make the constructor private ?Q161. What will happen if we remove the static keyword from main method ?Q162. Why Java don't use pointers ?Q163. Can we use both \"this\" and \"super\" in a constructor ?Q164. Do we need to import java.lang.package ?Q165. Is it necessary that each try block to be followed by catch block ? Q166. Can finally block be used without catch ?Q167. What is exception propogation ?Q168. Difference between nested and inner classes ?Q169. What is a nested interface ?Q170. What is an Externalizable interface ?Q171. Difference between serializable and externalizable interface ?Q172. What is reflection ?Q173. Can we instantiate the object of derived class if parent constructor is protected ?Q174. Can we declare an abstract method private ?Q175. What are the design considerations while making a choice between using interface and abstract class ?Q176. What is a config Object? Q177. What is a pageContext Object? Q178. What is suspend() method used for ?Q179. Difference between suspend() and stop() ?Q180. What are the benefits of using Spring Framework ?Q181. what is the difference between collections class vs collections interface ?Q182. Will this code give error if i try to add two heterogeneous elements in the arraylist. ? and Why ?List list1 = new ArrayList<>();list1.add(5);list1.add(\"5\");Q183. Difference between Java beans and Spring Beans ?Q184. What is the difference between System.console.write and System.out.println ?Q185. What are various types of Class loaders used by JVM ?Q186. How are classes loaded by JVM ?Q187. Difference between C++ and Java ?Q188. Difference between static vs. dynamic class loading?Q189. Tell something about BufferedWriter ? What are flush() and close() used for ?Q190. What is Scanner class used for ? when was it introduced in Java ?Q191. Why Struts 1 Classes are not Thread Safe whereas Struts 2 classes are thread safe ?Q192. What are some Java related technologies used for distributed computing ?Q193. Whats the purpose of marker interfaces ?Q194. What is the difference between final, finally and finalize() ?Q195. When do you get ClassCastException?Q196. Explain Thread States ?Q197. What are strong, soft, weak and phantom references in Java ?Q198. Difference between yield() and sleeping()? Q199. What is a daemon thread? Give an Example ?Q200. What is the difference between AWT and Swing?Q201. What is the order of method invocation in an applet?Q202. Name few tools for probing Java Memory Leaks ?Q203. Which memory areas does instance and static variables use ?Q204. What is J2EE? What are J2EE components and services?Q205. What are the components of J2EE ?Q206. What is XML ?Q207. Difference between SAX and DOM Parser ?Q208. What is DTD ?Q209. What is XSD ?Q210. What is JAXP ?Q211. What is JAXB ?Q212. What is marshalling ?Q213. What is unmarshalling ?Q214. Which load testing tools have you used ?Q215. What are LDAP servers used for ?Q216. What is the difference between comparable and comparator in java.util pkg?Q217. What are different modules of spring ?Q218. Explain Flow of Spring MVC ?Q219. What is Spring configuration file?Q220. Q: What is default scope of bean in Spring framework?Q221. What bean scopes does Spring support? Explain them.Q222. What is bean auto wiring?Q223. Difference between socket and servlet ?Q224. Difference Between this() and super() ?Q225. What are the phases of the JSP life cycle ?Q226. Difference between the jsp scriptlet tag and jsp declaration tag?Q227. What are JSP directives ? What are different types of directives ?Q228. What is Java bytecode ?Q229. What is a Listener ?Q230. What is MVC ? Q231. What is race condition ?Q232. What is unicode ?Q233. What is ThreadFactory ?Q234. What is PermGen or Permanent Generation ?Q235. What is metaspace ?Q236. What is the benefit of inner / nested classes ?Q237. Explain Static nested Classes ?Q238. Explain Inner Classes ?Q239. Explain Method Local Inner Classes ?Q240. Explain about anonymous inner classes ?Q241. What will happen if class implement two interface having common method?Q242. What is the advantage of using arrays over variables ?Q243. What are the disadvantages of using arrays ?Q244. Difference between Class#getInstance() and new operator ?Q245. Can we create an object if a Class doesn't have any constructor ( not even the default provided by constructor ) ?Q246. What is a cloneable interface and what all methods does it contain?Q247. When you will synchronize a piece of your code?Q248. Are there any global variables in Java, which can be accessed by other part of your program?Q249. What is an applet? What is the lifecycle of an applet?Q250. What is meant by controls and what are different types of controls in AWT / SWT?Q251. What is a stream and what are the types of Streams and classes of the Streams?Q252. What is session tracking and how do you track a user session in servlets?Q253. What is connection pooling?Q254. Advantage of Collection classes over Arrays ?Q255. What are the Disadvantages of using Collection Classes over Arrays ?Q256. Can we call constructor explicitly ?Q257. Does a class inherit the constructor of its super class?Q258. What is the difference between float and double?Q259. What is the difference between >> and >>>?Q260. What is the difference between System.out ,System.err and System.in?Q261. Is it possible to compile and run a Java program without writing main( ) method?Q262. What are different ways of object creation in Java ?Q263. What is Generalization and Specialization in terms of casting ?Q264. Can we call the garbage collector explicitly ?Q265. How does volatile affect code optimization by compiler?Q266. Do you think that Java should have had pointers ?Q267. How would you go about debugging a NullPointerException?Q268. How does Java differ from other programming languages you've worked with?Q269. Should good code be self-documenting, or is it the responsibility of the developer to document it?Q270. What are points to consider in terms of access modifier when we are overriding any method?Q271. what is covariant return type? Q272. How compiler handles the exceptions in overriding ?Q273. Why is Java considered Portable Language ?Q274. Tell something about history of Java ?Q275. How to find if JVM is 32 or 64 bit from Java program. ?Q276. Does every class needs to have one non parameterized constructor ?Q277. Difference between throw and throws ?Q278. Can we use \"this\" within static method ? Why ?Q279. Similarity and Difference between static block and static method ?Q280. What are the platforms supported by Java Programming Language?Q281. How Java provide high Performance ?Q282. What is IDE ? List few Java IDE ?Q283. What is an Object ?Q284. What is a Class ?Q285. According to Java Operator precedence, which operator is considered to be with highest precedence?Q286. What data type Variable can be used in a switch statement ?Q287. What are the sub classes of Exception class?Q288. How finally used under Exception Handling?Q289. What things should be kept in mind while creating your own exceptions in Java?Q290. What is Comparable Interface?Q291. Explain Set Interface?Q292. What is the difference between the Reader/Writer class hierarchy and the InputStream/OutputStream class hierarchy?Q293. What are use cases?Q294. Which Java operator is right associative?Q295. What is the difference between a break statement and a continue statement?Q296. What is the purpose of the System class?Q297. Variable of the boolean type is automatically initialized as?Q298. Can try statements be nested?Q299. What will happen if static modifier is removed from the signature of the main method?Q300. What is the Locale class?Q301. Define Network Programming?Q302. What are the advantages and Disadvantages of Sockets ?Q303. What environment variables do I need to set on my machine in order to be able to run Java programs?Q304. What is Externalizable interface?Q305. What is the difference between the size and capacity of a Vector?Q306. What is an enum or enumeration?Q307. What is constructor chaining and how is it achieved in Java?Q308. What is the best practice configuration usage for files - pom.xml or settings.xml ?Q309. Why Java provides default constructor ?Q310. In a case where there are no instance variables what does the default constructor initialize?Q311. How can I change the default location of the generated jar when I command \"mvn package\"?Q312. What is Maven's order of inheritance?Q313. What is a Mojo?Q314. How do I determine which POM contains missing transitive dependency?Q315. Difference between Encapsulation and Data Hiding ?Q316. Difference between Abstraction and Implementation hiding ?Q317. What are the features of encapsulation ?Q318. What are the examples of Abstraction in Java ?Q319. What are different ways to create String Object? Explain.Q320. Write a method to check if input String is Palindrome?Q321. Write a method that will remove given character from the String?Q322. Which String class methods are used to make string upper case or lower case?Q323. How to convert String to byte array and vice versa?Q324. Why Char array is preferred over String for storing password?Q325. Why String is popular HashMap key in Java?Q326. What ate the getter and setter methods ?Q327. public class a { public static void main(String args[]){ final String s1=\"job\"; final String s2=\"seeker\"; String s3=s1.concat(s2); String s4=\"jobseeker\"; System.out.println(s3==s4); // Output 1 System.out.println(s3.hashCode()==s4.hashCode()); Output 2 }}What will be the Output 1 and Output 2 ?Q328. What is the use of HashCode in objects ?Q329. Difference between Compositions and Inheritance ?Q330. Will finally be called always if all code has been kept in try block ?Q331. Will the static block be executed in the following code ? Why ?class Test{ static { System.out.println(\"Why I am not executing \"); } public static final int param=20;}public class Demo { public static void main(String[] args) { System.out.println(Test.param); }}Q332. Will static block for Test Class execute in the following code ? class Test{ static { System.out.println(\"Executing Static Block.\"); } public final int param=20; public int getParam(){ return param; }}public class Demo { public static void main(String[] args) { System.out.println(new Test().param); }}Q333. What does String intern() method do?Q334. Will the following program display \"Buggy Bread\" ?class Test{ static void display(){ System.out.println(\"Buggy Bread\"); }}class Demo{ public static void main(String... args){ Test t = null; t.display(); }}Q335. How substring() method of String class create memory leaks?Q336. Write a program to reverse a string iteratively and recursively ?Q337. If you have access to a function that returns a random integer from one to five, write another function which returns a random integer from one to seven.Q338. Write a method to convert binary to a number ?Q339. What will the following code print ?String s1 = \"Buggy Bread\"; String s2 = \"Buggy Bread\"; if(s1 == s2) System.out.println(\"equal 1\"); String n1 = new String(\"Buggy Bread\"); String n2 = new String(\"Buggy Bread\"); if(n1 == n2) System.out.println(\"equal 2\"); Q340. Difference between new operator and Class.forName().newInstance() ?Q341. What is Java bytecode ?Q342. How to find whether a given integer is odd or even without use of modules operator in java?Q343. Is JVM a overhead ? Q344. Can we use Ordered Set for performing Binary Search ?Q345. What is Byte Code ? Why Java's intermediary Code is called Byte Code ?Q346. Difference between ArrayList and LinkedList ?Q347. If you are given a choice to use either ArrayList and LinkedList, Which one would you use and Why ?Q348. What are the pre-requisite for the collection to perform Binary Search ?Q349. Can you provide some implementation of a Dictionary having large number of words ? Q350. Difference between PATH and CLASSPATH ?Q351. Name few access and non access Class Modifiers ?Q352. Which Java collection class can be used to maintain the entries in the order in which they were last accessed?Q353. Is it legal to initialize List like this ?LinkedList l=new LinkedList(); Q354. Which of the following syntax is correct ?import static java.lang.System.*;or static import java.lang.System.*;Q355. What will be the output of following code ?public static void main(String[] args) { int x = 10; int y; if (x < 100) y = x / 0; if (x >= 100) y = x * 0; System.out.println(\"The value of y is: \" + y); }Q356. What will be the output of following Code ?class BuggyBread { public static void main(String[] args) { String s2 = \"I am unique!\"; String s5 = \"I am unique!\"; System.out.println(s2 == s5); } }Q357. What will be the output of following code ?class BuggyBread2 { private static int counter = 0; void BuggyBread2() { counter = 5; } BuggyBread2(int x){ counter = x; } public static void main(String[] args) { BuggyBread2 bg = new BuggyBread2(); System.out.println(counter); } }Q358. What will be the output of following code ?class BuggyBread1 { public String method() { return \"Base Class - BuggyBread1\"; }}class BuggyBread2 extends BuggyBread1{ private static int counter = 0; public String method(int x) { return \"Derived Class - BuggyBread2\"; } public static void main(String[] args) { BuggyBread1 bg = new BuggyBread2(); System.out.println(bg.method()); } }Q359. What are RESTful Web Services ?Q360. Which markup languages can be used in restful web services ? Q361. Difference between Inner and Outer Join ?Q362. What is a Cursor ?Q363. What is database deadlock ? How can we avoid them?Q364. What are temp tables ?Q365. Why Web services use HTTP as the communication protocol ?Q366. what will be the output of this code ?public static void main(String[] args) { StringBuffer s1=new StringBuffer(\"Buggy\"); test(s1); System.out.println(s1); } private static void test(StringBuffer s){ s.append(\"Bread\"); }Q367. what will be the output of this code ?public static void main(String[] args) { String s1=new String(\"Buggy\"); test(s1); System.out.println(s1); } private static void test(StringBuffer s){ s.append(\"Bread\"); }Q368. what will be the output of this code ?public static void main(String[] args) { StringBuffer s1=new StringBuffer(\"Buggy\"); test(s1); System.out.println(s1); } private static void test(StringBuffer s){ s=new StringBuffer(\"Bread\"); }Q369. what will be the output ?class Animal { public void eat() throws Exception { }}class Dog2 extends Animal { public void eat(){} public static void main(){ Animal an = new Dog2(); an.eat(); }}Q370. What are advantages of using Servlets over CGI ?Q371. gfddddddddddddddddddddddddQ372. Does SQL allow null values ? Can we use it within Where clause ?Q373. Can we add duplicate keys in a HashMap ? What will happen if we attempt to add duplicate values ?Q374. What is the use of HTTPSession in relation to http protocol ?Q375. Why using cookie to store session info is a better idea than just using session info in the request ?Q376. What are different types of cookies ?Q377. http protocol is by default ... ?Q378. Can finally block throw an exception ?Q379. Can we have try and catch blocks within finally ?Q380. Which of the following is a canonical path ?1. C:\\directory\\..\\directory\\file.txt2. C:\\directory\\subDirectory1\\directory\\file.txt3. \\directory\\file.txtQ381. What will the following code print when executed on Windows ?public static void main(String[] args){ String parent = null; File file = new File(\"/file.txt\"); System.out.println(file.getPath()); System.out.println(file.getAbsolutePath()); try { System.out.println(file.getCanonicalPath()); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } }Q382. What will be the output of following code ?public static void main(String[] args){ String name = null; File file = new File(\"/folder\", name); System.out.print(file.exists()); }Q383. What will be the output of following code ?public static void main(String[] args){ String parent = null; File file = new File(parent, \"myfile.txt\"); try { file.createNewFile(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } }Q384. What will be the output of following code ?public static void main(String[] args){ String child = null; File file = new File(\"/folder\", child); try { file.createNewFile(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } }Q385. What will be the output of following code, assuming that currently we are in c:\\Project ? public static void main(String[] args){ String child = null; File file = new File(\"../file.txt\"); System.out.println(file.getPath()); System.out.println(file.getAbsolutePath()); try { System.out.println(file.getCanonicalPath()); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } }Q386. Which is the abstract parent class of FileWriter ?Q387. Which class is used to read streams of characters from a file?Q388. Which class is used to read streams of raw bytes from a file?Q389. Which is the Parent class of FileInputStream ?Q390. Which of the following code is correct ?a. FileWriter fileWriter = new FileWriter(\"../file.txt\");File file = new File(fileWriter );BufferedWriter bufferedOutputWriter = new BufferedWriter(fileWriter);b. BufferedWriter bufferedOutputWriter = new BufferedWriter(\"../file.txt\");File file = new File(bufferedOutputWriter );FileWriter fileWriter = new FileWriter(file);c. File file = new File(\"../file.txt\");FileWriter fileWriter = new FileWriter(file);BufferedWriter bufferedOutputWriter = new BufferedWriter(fileWriter);d.File file = new File(\"../file.txt\");BufferedWriter bufferedOutputWriter = new BufferedWriter(file); FileWriter fileWriter = new FileWriter(bufferedOutputWriter );Q391. Which exception should be handled in the following code ?File file = new File(\"../file.txt\");FileWriter fileWriter = new FileWriter(file);Q392. Which exceptions should be handled with the following code ?FileOutputStream fileOutputStream = new FileOutputStream(new File(\"newFile.txt\"));Q393. Will this code compile fine ?ObjectOutputStream objectOutputStream = new ObjectOutputStream(new FileOutputStream(new File(\"newFile.txt\")));Q394. What is the problem with this code ?class BuggyBread1 { private BuggyBread2 buggybread2; public static void main(String[] args){ try { BuggyBread1 buggybread1 = new BuggyBread1(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(new FileOutputStream(new File(\"newFile.txt\"))); objectOutputStream.writeObject(buggybread1); } catch (Exception e) { // TODO Auto-generated catch block e.printStackTrace(); } }}Q395. Will this code run fine if BuggyBread2 doesn't implement Serializable interface ?class BuggyBread1 implements Serializable{ private BuggyBread2 buggybread2 = new BuggyBread2(); public static void main(String[] args){ try { BuggyBread1 buggybread1 = new BuggyBread1(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(new FileOutputStream(new File(\"newFile.txt\"))); objectOutputStream.writeObject(buggybread1); } catch (Exception e) { // TODO Auto-generated catch block e.printStackTrace(); } }}Q396. Will this code work fine if BuggyBread2 doesn't implement Serializable ?class BuggyBread1 extends BuggyBread2 implements Serializable{ private int x = 5; public static void main(String[] args){ try { BuggyBread1 buggybread1 = new BuggyBread1(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(new FileOutputStream(new File(\"newFile.txt\"))); objectOutputStream.writeObject(buggybread1); } catch (Exception e) { // TODO Auto-generated catch block e.printStackTrace(); } }}Q397. Can we compose the Parent Class object like this ?class BuggyBread1 extends BuggyBread2 { private BuggyBread2 buggybread2; public static void main(String[] args){ buggybread2 = new BuggyBread2(); }}Q398. Will this code Work ? If not , Why ?java.util.Calendar c = new java.util.Calendar();Q399. Is java.util.Date an abstract Class ? Is java.util.Calendar an abstract Class ?Q400. What will the following code print ?java.util.Calendar c = java.util.Calendar.getInstance();c.add(Calendar.MONTH, 5);System.out.println(c.getTime());Q401. Which of the following code is correct ?a. DateFormat df = DateFormat.getInstance();b. DateFormat df = DateFormat.getDateInstance();c. DateFormat df = DateFormat.getInstance(DateFormat.FULL);d. DateFormat df = DateFormat.getDateInstance(DateFormat.FULL);Q402. What is the use of parse method in DateFormat ?Q403. Which of the following is not a valid java.util.Locale initialization ?a. new Locale ()b. new Locale ( String language )c. new Locale ( String language , String country )Q404. Which of the following is not a valid NumberFormat initialization ?a. NumberFormat.getInstance()b. NumberFormat.getDateInstance()c. NumberFormat.getCurrencyInstance()d. NumberFormat.getNumberInstance()Q405. What will the following code print ?public static void main(String[] args){ Integer i1 = new Integer(\"1\"); Integer i2 = new Integer(\"2\"); Integer i3 = Integer.valueOf(\"3\"); int i4 = i1 + i2 + i3; System.out.println(i4); }Q406. Which of the following syntax are correct ?a. LinkedList l=new LinkedList();b. List l=new LinkedList();c. LinkedList l=new LinkedList();d. List l = new LinkedList();Q407. Which of the following code is correct ?a. Date date = DateFormat.newInstance(DateFormat.LONG, Locale.US).parse(str); b. Date date = DateFormat.newInstance(DateFormat.LONG, Locale.US).format(str); c. Date date = DateFormat.getDateInstance(DateFormat.LONG, Locale.US).parse(str);Q408. What's wrong with this code ?public static void main(String[] args) { String regex = \"(\\\\w+)*\"; String s = \"Java is a programming language.\"; Pattern pattern = Pattern.compile(regex); Matcher matcher = pattern.matcher(s); while (matcher.next()) { System.out.println(\"The e-mail id is: \" + matcher.group()); }}Q409. Which methods of the Pattern class have equivalent methods in the String class? Q410. Can we compare Integers by using equals() in Java ?Q411. What is comparator interface used for ?Q412. Which are the sorted collections ?Q413. What is rule regarding overriding equals and hasCode method ?Q414. What is the difference between Collection and Collections ?Q415. Is Java a statically typed or dynamically typed language ?Q416. What do you mean by \"Java is a statically typed language\" ?Q417. How can we reverse the order in the TreeMap ?Q418. TreeMap orders the elements on which field ?Q419. How TreeMap orders the elements if the Key is a String ?Q420. Can we add heterogeneous elements into TreeMap ?Q421. Will it create any problem if We add elements with key as user defined object into the TreeMap ?Q422. Can we null keys in TreeMap ?Q423. Can value be null in TreeMap ?Q424. Which interface TreeMap implements ?Q425. Do we have form beans in Struts 2 ?Q426. What is a ConcurrentHashMap ?Q427. What is the use of double checked locking in createInstance() of Singleton class?Double checked locking code:public static Singleton createInstance() { if(singleton == null){ synchronized(Singleton.class) { if(singleton == null) { singleton = new Singleton(); } } } return singleton;}Single checked locking code:public static Singleton createInstance() { synchronized(Singleton.class) { if(singleton == null) { singleton = new Singleton(); } } return singleton;}What advantage does the first code offer compared to the second ?Q428. Why are Getter and Setter better than directly changing and retrieving fields ?Q429. Can we overload main method in Java ?Q430. What the Bean scopes provided by Spring ?Q431. What are the various Auto Wiring types in Spring ?Q432. Difference between first level and second level cache in hibernate ?Q433. What are the the methods to clear cache in Hibernate ?Q434. What are different types of second level cache ?Q435. Can we disable first level cache ? What should one do if we don't want an object to be cached ?Q436. How to configure second level cache in Hibernate ?Q437. What is Hibernate ?Q438. What are the advantages of Hibernate ?Q439. What are the different types of inheritance in Hibernate ?Q440. What is the purpose of dialect configured in Hibernate configuration file ?Q441. Please specify in what sequence the objects of following classes will be created ?Session , SessionFactory, Query , ConfigurationQ442. What are different types of associations in Hibernate ?Q443. What are the configuration files in Hibernate ?Q444. What are the contents of Hibernate configuration file ( hibernate.cfg.xml ) ?Q445. What are the Core Interfaces of Hibernate Framework ? Q446. What are collection types in Hibernate ?Q447. Difference between load and get ?Q448. What is lazy fetching in Hibernate ?Q449. Different types of Hibernate Instance States ?Q450. Is It Good to use Reflection in an application ? Why ?Q451. Why is Reflection slower ?Q452. When should we use prototype scope and singleton scope for beans ?Q453. Difference between Assert and Verify ?Q454. What is the difference between ArrayList and LinkedList ?Q455. Which class elements are not persisted ?Q456. Which annotations are used in Hibernate ?Q457. What entries we make in the hibernate config file if we are not using hbm files but Annotations ?Q458. How many SessionFactory and Session objects are created ?Q459. What is the way to rollback transaction if something goes wrong using hibernate API ? Q460. What is the use of hbm2ddl Configuration in Hibernate ?Q461. What is the difference between these 2 annotations ?@Entity@Entity ( name=\"EMPLOYEES\" )Q462. \"What is the difference between these 2 annotations ?@Entity ( name =\"EMPLOYEES\")@Entity @Table ( name=\"\"EMPLOYEES\"\" )@Entity ( name=\"EMP\")@Table ( name=\"EMPLPYEES\" )Q463. What are the different ID generating strategies using @GeneratedValue annotation ?Q464. How to do Eager loading in Hibernate ?Q465. What is Lazy Initialization in Hibernate ?Q466. What are the ways to avoid LazyInitializationException ?Q467. What is cascade ?Q468. What are the different Cascade types ?Q469. Which type of associated Entities are Eagerly loaded by Default ?Q470. After which Hibernate version , related Entities are initialized lazily ?Q471. Can we declare Entity class as final ?Q472. What are the restrictions for the entity classes ?Q473. What is the difference between int[] x; and int x[]; ?Q474. What are the annotations used in Junit with Junit4 ?Q475. What is asynchronous I/O ?Q476. If there is a conflict between Base Class Method definition and Interface Default method definition, Which definition is Picked ?Q477. What are new features introduced with Java 8 ?Q478. Can we have a default method without a Body ?Q479. Does java allow implementation of multiple interfaces having Default methods with Same name and Signature ?Q480. What are Default Methods ?Q481. Can we have a default method definition in the interface without specifying the keyword \"default\" ? Q482. Can a class implement two Interfaces having default method with same name and signature ?public interface DefaultMethodInterface { default public void defaultMethod(){ System.out.println(\"DefaultMethodInterface\"); }}public interface DefaultMethodInterface2 { default public void defaultMethod(){ System.out.println(\"DefaultMethodInterface2\"); }}public class HelloJava8 implements DefaultMethodInterface,DefaultMethodInterface2 { public static void main(String[] args){ DefaultMethodInterface defMethIn = new HelloJava8(); defMethIn.defaultMethod(); }}Q483. What If we make the method as abstract in another Interface ?public interface DefaultMethodInterface { default public void defaultMethod(){ System.out.println(\"DefaultMethodInterface\"); }}public interface DefaultMethodInterface2 { public void defaultMethod(){ System.out.println(\"DefaultMethodInterface2\"); }}public class HelloJava8 implements DefaultMethodInterface,DefaultMethodInterface2 { public static void main(String[] args){ DefaultMethodInterface defMethIn = new HelloJava8(); defMethIn.defaultMethod(); }}Q484. What if we override the conflicting method in the Class ?public interface DefaultMethodInterface { default public void defaultMethod(){ System.out.println(\"DefaultMethodInterface\"); }}public interface DefaultMethodInterface2 { default public void defaultMethod(){ System.out.println(\"DefaultMethodInterface2\"); }}public class HelloJava8 implements DefaultMethodInterface,DefaultMethodInterface2 { public static void main(String[] args){ DefaultMethodInterface defMethIn = new HelloJava8(); defMethIn.defaultMethod(); } public void defaultMethod(){ System.out.println(\"HelloJava8\"); }}Q485. What will happen if there is a default method conflict as mentioned above and we have specified the same signature method in the base class instead of overriding in the existing class ?Q486. If a method definition has been specified in Class , its Base Class , and the interface which the class is implementing, Which definition will be picked if we try to access it using Interface Reference and Class object ? Q487. If a method definition has been specified in the Base Class and the interface which the class is implementing, Which definition will be picked if we try to access it using Interface Reference and Class object ? Q488. Can we use static method definitions in Interfaces ?Q489. Can we access Interface static method using Interface references ?Q490. Can we have default method with same name and signature in the derived Interface as the static method in base Interface and vice versa ?Q491. What is a Lambda Expression ? What's its use ?Q492. Difference between Predicate, Supplier and Consumer ? Q493. What does the following lambda expression means ?helloJava8 ( x-> x%2 )Q494. What is the difference between namenode and datanode in Hadoop? Q495. Write a program to see if the number is prefect number or not ?Q496. Difference between a Pointer and a Reference ?Q497. Difference between TCP and UDP ?Q498. What things you would care about to improve the performance of Application if its identified that its DB communication that needs to be improved ?Q499. Explain Singleton Design Pattern ?"}},{"data":{"ques":"Q1. What is a cookie ?"}},{"data":{"ques":"Q2. Can we reduce the visibility of the overridden method ?"}},{"data":{"ques":"Q3. What are different types of inner classes ?"}},{"data":{"ques":"Q4. Difference between TreeMap and HashMap ?"}},{"data":{"ques":"Q5. What is the difference between List, Set and Map ?"}},{"data":{"ques":"Q6. Difference between Public, Private, Default and Protected ?"}},{"data":{"ques":"Q7. What is servlet Chaining ?"}},{"data":{"ques":"Q8. What are the Wrapper classes available for primitive types ?"}},{"data":{"ques":"Q9. What are concepts introduced with Java 5 ?"}},{"data":{"ques":"Q10. Does Constructor creates the object ?"}},{"data":{"ques":"Q11. Can static method access instance variables ?"}},{"data":{"ques":"Q12. Does Java support Multiple Inheritance ?"}},{"data":{"ques":"Q13. Difference between == and .equals() ?"}},{"data":{"ques":"Q14. Difference between Checked and Unchecked exceptions ?"}},{"data":{"ques":"Q15. What is a Final Variable ?"}},{"data":{"ques":"Q16. Which class does not override the equals() and hashCode() methods, inheriting them directly from class Object?"}},{"data":{"ques":"Q17. What is a final method ?"}},{"data":{"ques":"Q18. Which interface does java.util.Hashtable implement?"}},{"data":{"ques":"Q19. What is an Iterator?"}},{"data":{"ques":"Q20. Which interface provides the capability to store objects using a key-value pair?"}},{"data":{"ques":"Q21. Difference between HashMap and Hashtable?"}},{"data":{"ques":"Q22. Does java allow overriding static methods ?"}},{"data":{"ques":"Q23. When are static variables loaded in memory ?"}},{"data":{"ques":"Q24. Can we serialize static variables ?"}},{"data":{"ques":"Q25. What will this code print ?String a = new String (\"TEST\");String b = new String (\"TEST\");if(a == b) { System.out.println (\"TRUE\"); } else { System.out.println (\"FALSE\"); }"}},{"data":{"ques":"Q26. There are two objects a and b with same hashcode. I am inserting these two objects inside a hashmap.hMap.put(a,a);hMap.put(b,b);where a.hashCode()==b.hashCode()Now tell me how many objects will be there inside the hashmap?"}},{"data":{"ques":"Q27. Difference between long.Class and Long.TYPE ?"}},{"data":{"ques":"Q28. Does Java provides default copy constructor ?"}},{"data":{"ques":"Q29. What are the common uses of \"this\" keyword in java ?"}},{"data":{"ques":"Q30. What are the difference between Threads and Processes ?"}},{"data":{"ques":"Q31. How can we run a java program without making any object?"}},{"data":{"ques":"Q32. Explain multithreading in Java ?"}},{"data":{"ques":"Q33. Can constructors be synchronized in Java ?"}},{"data":{"ques":"Q34. can we create a null as a key for a map collection ?"}},{"data":{"ques":"Q35. What is the use of hashcode in Java ?"}},{"data":{"ques":"Q36. Why java doesn't support multiple Inheritence ?"}},{"data":{"ques":"Q37. Why threads block or enters to waiting state on I/O?"}},{"data":{"ques":"Q38. What are transient variables in java?"}},{"data":{"ques":"Q39. What is the difference between yield() and sleep()?"}},{"data":{"ques":"Q40. What are wrapper classes ?"}},{"data":{"ques":"Q41. What is the difference between time slicing and preemptive scheduling ?"}},{"data":{"ques":"Q42. What is the initial state of a thread when it is created and started?"}},{"data":{"ques":"Q43. What one should take care of, while serializing the object?"}},{"data":{"ques":"Q44. What is a String Pool ?"}},{"data":{"ques":"Q45. Why is String immutable in Java ?"}},{"data":{"ques":"Q46. what is the use of cookie and session ? and What is the difference between them ?"}},{"data":{"ques":"Q47. Which are the different segments of memory ?"}},{"data":{"ques":"Q48. Which memory segment loads the java code ?"}},{"data":{"ques":"Q49. which containers use a border Layout as their default layout ?"}},{"data":{"ques":"Q50. Can a lock be acquired on a class ?"}},{"data":{"ques":"Q51. What state does a thread enter when it terminates its processing?"}},{"data":{"ques":"Q52. How many bits are used to represent Unicode, ASCII, UTF-16, and UTF-8 characters?"}},{"data":{"ques":"Q53. Does garbage collection guarantee that a program will not run out of memory?"}},{"data":{"ques":"Q54. What is an object's lock and which object's have locks?"}},{"data":{"ques":"Q55. What is casting?"}},{"data":{"ques":"Q56. What restrictions are placed on method overriding?"}},{"data":{"ques":"Q57. How does a try statement determine which catch clause should be used to handle an exception?"}},{"data":{"ques":"Q58. Describe what happens when an object is created in Java ?"}},{"data":{"ques":"Q59. What is the difference between StringBuffer and String class ?"}},{"data":{"ques":"Q60. Describe, in general, how java's garbage collector works ?"}},{"data":{"ques":"Q61. What is RMI ?"}},{"data":{"ques":"Q62. What is JDBC? Describe the steps needed to execute a SQL query using JDBC."}},{"data":{"ques":"Q63. Are constructors inherited? Can a subclass call the parent's class constructor? When?"}},{"data":{"ques":"Q64. What is JSON ?"}},{"data":{"ques":"Q65. What is the role of JSON.stringify ?"}},{"data":{"ques":"Q66. When were Enums introduced in Java ?"}},{"data":{"ques":"Q67. Which function is used to convert a JSON text into an object ?"}},{"data":{"ques":"Q68. Which data types are supported by JSON ?"}},{"data":{"ques":"Q69. What are the benefits of JSON over XML ?"}},{"data":{"ques":"Q70. What are the methods of Object Class ?"}},{"data":{"ques":"Q71. Explain JMS ( Java Messaging Services ) ?"}},{"data":{"ques":"Q72. Explain EJB (Enterprise Java Beans) ?"}},{"data":{"ques":"Q73. Which MVC is struts2 based on ?"}},{"data":{"ques":"Q74. What is an API ( Application Programming Interface ) ?"}},{"data":{"ques":"Q75. What is URL?"}},{"data":{"ques":"Q76. Explain features of struts2 ?"}},{"data":{"ques":"Q77. What is HTTP ?"}},{"data":{"ques":"Q78. what is content negotiation?"}},{"data":{"ques":"Q79. Is tomcat an application or Web server ?"}},{"data":{"ques":"Q80. Is Apache an application or Web server ?"}},{"data":{"ques":"Q81. What are the default or implicitly assigned values for data types in java ?"}},{"data":{"ques":"Q82. What is difference between Encapsulation And Abstraction?"}},{"data":{"ques":"Q83. Can I import same package/class twice? Will the JVM load the package twice at runtime?"}},{"data":{"ques":"Q84. Explain static blocks in Java ?"}},{"data":{"ques":"Q85. Which access specifier can be used with Class ?"}},{"data":{"ques":"Q86. Explain Annotations ?"}},{"data":{"ques":"Q87. Give an Example of Annotations ?"}},{"data":{"ques":"Q88. What are few of the Annotations pre defined by Java?"}},{"data":{"ques":"Q89. What are meta Annotations ?"}},{"data":{"ques":"Q90. Name few meta-annotations ?"}},{"data":{"ques":"Q91. How to display and set the Class path in Unix ?"}},{"data":{"ques":"Q92. Difference between Abstract and Concrete Class ?"}},{"data":{"ques":"Q93. Difference between Overloading and Overriding ?"}},{"data":{"ques":"Q94. Difference between Vector and ArrayList ?"}},{"data":{"ques":"Q95. Different ways of implementing Threads in Java ?"}},{"data":{"ques":"Q96. What is Volatile keyword used for ?"}},{"data":{"ques":"Q97. What is Serialization ?"}},{"data":{"ques":"Q98. What is the use of Transient Keyword ?"}},{"data":{"ques":"Q99. What is a final variable ?"}},{"data":{"ques":"Q100. What is a Final Method ?"}},{"data":{"ques":"Q101. What is a Final Class ?"}},{"data":{"ques":"Q102. What is an Immutable Object ?"}},{"data":{"ques":"Q103. What is an immutable class ?"}},{"data":{"ques":"Q104. How to implement an immutable class ?"}},{"data":{"ques":"Q105. Does Declaring an object \"final\" makes it immutable ?"}},{"data":{"ques":"Q106. Difference between object instantiation and construction ?"}},{"data":{"ques":"Q107. Can we override static methods ? Why ?"}},{"data":{"ques":"Q108. Can we access instance variables within static methods ?"}},{"data":{"ques":"Q109. Can we reduce the visibility of the inherited or overridden method ?"}},{"data":{"ques":"Q110. Give an Example of checked and unchecked exception ?"}},{"data":{"ques":"Q111. Name few Java Exceptions ?"}},{"data":{"ques":"Q112. Which of the following is tightly bound ? Inheritance or Composition ?"}},{"data":{"ques":"Q113. How can we make sure that a code segment gets executed even in case of uncatched exceptions ?"}},{"data":{"ques":"Q114. Explain the use of \"Native\" keyword ?"}},{"data":{"ques":"Q115. What is \"super\" used for ?"}},{"data":{"ques":"Q116. What is \"this\" keyword used for ?"}},{"data":{"ques":"Q117. Difference between boolean and Boolean ?"}},{"data":{"ques":"Q118. What is a finalize method ?"}},{"data":{"ques":"Q119. What are Marker Interfaces ? Name few Java marker interfaces ?"}},{"data":{"ques":"Q120. Is runnable a Marker interface ?"}},{"data":{"ques":"Q121. Difference between Process and Thread ?"}},{"data":{"ques":"Q122. What is a Deadlock ?"}},{"data":{"ques":"Q123. Difference between Serialization and Deserialization ?"}},{"data":{"ques":"Q124. Explain Autoboxing ?"}},{"data":{"ques":"Q125. What is an Enum type ?"}},{"data":{"ques":"Q126. What are Wrapper Classes ? What are Primitive Wrapper Classes ?"}},{"data":{"ques":"Q127. What Design pattern Wrapper Classes implement ?"}},{"data":{"ques":"Q128. What is \"Import\" used for ?"}},{"data":{"ques":"Q129. Different types of memory used by JVM ?"}},{"data":{"ques":"Q130. What is a class loader ? What are the different class loaders used by JVM ?"}},{"data":{"ques":"Q131. Can we declare interface methods as private ?"}},{"data":{"ques":"Q132. What is a Static import ?"}},{"data":{"ques":"Q133. Difference between StringBuffer and StringBuilder ?"}},{"data":{"ques":"Q134. Difference between Map and HashMap ?"}},{"data":{"ques":"Q135. What is a Property class ?"}},{"data":{"ques":"Q136. Explain the scenerios to choose between String , StringBuilder and StringBuffer ?"}},{"data":{"ques":"Q137. Explain java.lang.OutOfMemoryError ?"}},{"data":{"ques":"Q138. Can we have multiple servlets in a web application and How can we do that ?"}},{"data":{"ques":"Q139. How can we manage Error Messages in the web application ?"}},{"data":{"ques":"Q140. Is JVM, a compiler or interpretor ?"}},{"data":{"ques":"Q141. Difference between implicit and explicit type casting ?"}},{"data":{"ques":"Q142. Difference between loadClass and Class.forName ?"}},{"data":{"ques":"Q143. Should we override finalize method ?"}},{"data":{"ques":"Q144. What is assert keyword used for ?"}},{"data":{"ques":"Q145. Difference between Factory and Abstract Factory Design Pattern ?"}},{"data":{"ques":"Q146. Difference between Factory and Builder Design Pattern ?"}},{"data":{"ques":"Q147. Difference between Proxy and Adapter ?"}},{"data":{"ques":"Q148. Difference between Adapter and Facade ?"}},{"data":{"ques":"Q149. Difference between Builder and Composite ?"}},{"data":{"ques":"Q150. Example of Chain of Responsibility Design Pattern ?"}},{"data":{"ques":"Q151. Example of Observer Design Pattern ?"}},{"data":{"ques":"Q152. Difference between Factory and Strategy Design Pattern ?"}},{"data":{"ques":"Q153. Shall we use abstract classes or Interfaces in Policy / Strategy Design Pattern ?"}},{"data":{"ques":"Q154. Which kind of memory is used for storing object member variables and function local variables ?"}},{"data":{"ques":"Q155. Why do member variables have default values whereas local variables don't have any default value ?"}},{"data":{"ques":"Q156. What is a Default Constructor ?"}},{"data":{"ques":"Q157. Will Compiler creates a default no argument constructor if we specify only multi argument constructor ?"}},{"data":{"ques":"Q158. Can we overload constructors ?"}},{"data":{"ques":"Q159. What will happen if we make the constructor private ?"}},{"data":{"ques":"Q160. How can we create objects if we make the constructor private ?"}},{"data":{"ques":"Q161. What will happen if we remove the static keyword from main method ?"}},{"data":{"ques":"Q162. Why Java don't use pointers ?"}},{"data":{"ques":"Q163. Can we use both \"this\" and \"super\" in a constructor ?"}},{"data":{"ques":"Q164. Do we need to import java.lang.package ?"}},{"data":{"ques":"Q165. Is it necessary that each try block to be followed by catch block ? "}},{"data":{"ques":"Q166. Can finally block be used without catch ?"}},{"data":{"ques":"Q167. What is exception propogation ?"}},{"data":{"ques":"Q168. Difference between nested and inner classes ?"}},{"data":{"ques":"Q169. What is a nested interface ?"}},{"data":{"ques":"Q170. What is an Externalizable interface ?"}},{"data":{"ques":"Q171. Difference between serializable and externalizable interface ?"}},{"data":{"ques":"Q172. What is reflection ?"}},{"data":{"ques":"Q173. Can we instantiate the object of derived class if parent constructor is protected ?"}},{"data":{"ques":"Q174. Can we declare an abstract method private ?"}},{"data":{"ques":"Q175. What are the design considerations while making a choice between using interface and abstract class ?"}},{"data":{"ques":"Q176. What is a config Object? "}},{"data":{"ques":"Q177. What is a pageContext Object? "}},{"data":{"ques":"Q178. What is suspend() method used for ?"}},{"data":{"ques":"Q179. Difference between suspend() and stop() ?"}},{"data":{"ques":"Q180. What are the benefits of using Spring Framework ?"}},{"data":{"ques":"Q181. what is the difference between collections class vs collections interface ?"}},{"data":{"ques":"Q182. Will this code give error if i try to add two heterogeneous elements in the arraylist. ? and Why ?List list1 = new ArrayList<>();list1.add(5);list1.add(\"5\");"}},{"data":{"ques":"Q183. Difference between Java beans and Spring Beans ?"}},{"data":{"ques":"Q184. What is the difference between System.console.write and System.out.println ?"}},{"data":{"ques":"Q185. What are various types of Class loaders used by JVM ?"}},{"data":{"ques":"Q186. How are classes loaded by JVM ?"}},{"data":{"ques":"Q187. Difference between C++ and Java ?"}},{"data":{"ques":"Q188. Difference between static vs. dynamic class loading?"}},{"data":{"ques":"Q189. Tell something about BufferedWriter ? What are flush() and close() used for ?"}},{"data":{"ques":"Q190. What is Scanner class used for ? when was it introduced in Java ?"}},{"data":{"ques":"Q191. Why Struts 1 Classes are not Thread Safe whereas Struts 2 classes are thread safe ?"}},{"data":{"ques":"Q192. What are some Java related technologies used for distributed computing ?"}},{"data":{"ques":"Q193. Whats the purpose of marker interfaces ?"}},{"data":{"ques":"Q194. What is the difference between final, finally and finalize() ?"}},{"data":{"ques":"Q195. When do you get ClassCastException?"}},{"data":{"ques":"Q196. Explain Thread States ?"}},{"data":{"ques":"Q197. What are strong, soft, weak and phantom references in Java ?"}},{"data":{"ques":"Q198. Difference between yield() and sleeping()? "}},{"data":{"ques":"Q199. What is a daemon thread? Give an Example ?"}},{"data":{"ques":"Q200. What is the difference between AWT and Swing?"}},{"data":{"ques":"Q201. What is the order of method invocation in an applet?"}},{"data":{"ques":"Q202. Name few tools for probing Java Memory Leaks ?"}},{"data":{"ques":"Q203. Which memory areas does instance and static variables use ?"}},{"data":{"ques":"Q204. What is J2EE? What are J2EE components and services?"}},{"data":{"ques":"Q205. What are the components of J2EE ?"}},{"data":{"ques":"Q206. What is XML ?"}},{"data":{"ques":"Q207. Difference between SAX and DOM Parser ?"}},{"data":{"ques":"Q208. What is DTD ?"}},{"data":{"ques":"Q209. What is XSD ?"}},{"data":{"ques":"Q210. What is JAXP ?"}},{"data":{"ques":"Q211. What is JAXB ?"}},{"data":{"ques":"Q212. What is marshalling ?"}},{"data":{"ques":"Q213. What is unmarshalling ?"}},{"data":{"ques":"Q214. Which load testing tools have you used ?"}},{"data":{"ques":"Q215. What are LDAP servers used for ?"}},{"data":{"ques":"Q216. What is the difference between comparable and comparator in java.util pkg?"}},{"data":{"ques":"Q217. What are different modules of spring ?"}},{"data":{"ques":"Q218. Explain Flow of Spring MVC ?"}},{"data":{"ques":"Q219. What is Spring configuration file?"}},{"data":{"ques":"Q220. Q: What is default scope of bean in Spring framework?"}},{"data":{"ques":"Q221. What bean scopes does Spring support? Explain them."}},{"data":{"ques":"Q222. What is bean auto wiring?"}},{"data":{"ques":"Q223. Difference between socket and servlet ?"}},{"data":{"ques":"Q224. Difference Between this() and super() ?"}},{"data":{"ques":"Q225. What are the phases of the JSP life cycle ?"}},{"data":{"ques":"Q226. Difference between the jsp scriptlet tag and jsp declaration tag?"}},{"data":{"ques":"Q227. What are JSP directives ? What are different types of directives ?"}},{"data":{"ques":"Q228. What is Java bytecode ?"}},{"data":{"ques":"Q229. What is a Listener ?"}},{"data":{"ques":"Q230. What is MVC ? "}},{"data":{"ques":"Q231. What is race condition ?"}},{"data":{"ques":"Q232. What is unicode ?"}},{"data":{"ques":"Q233. What is ThreadFactory ?"}},{"data":{"ques":"Q234. What is PermGen or Permanent Generation ?"}},{"data":{"ques":"Q235. What is metaspace ?"}},{"data":{"ques":"Q236. What is the benefit of inner / nested classes ?"}},{"data":{"ques":"Q237. Explain Static nested Classes ?"}},{"data":{"ques":"Q238. Explain Inner Classes ?"}},{"data":{"ques":"Q239. Explain Method Local Inner Classes ?"}},{"data":{"ques":"Q240. Explain about anonymous inner classes ?"}},{"data":{"ques":"Q241. What will happen if class implement two interface having common method?"}},{"data":{"ques":"Q242. What is the advantage of using arrays over variables ?"}},{"data":{"ques":"Q243. What are the disadvantages of using arrays ?"}},{"data":{"ques":"Q244. Difference between Class#getInstance() and new operator ?"}},{"data":{"ques":"Q245. Can we create an object if a Class doesn't have any constructor ( not even the default provided by constructor ) ?"}},{"data":{"ques":"Q246. What is a cloneable interface and what all methods does it contain?"}},{"data":{"ques":"Q247. When you will synchronize a piece of your code?"}},{"data":{"ques":"Q248. Are there any global variables in Java, which can be accessed by other part of your program?"}},{"data":{"ques":"Q249. What is an applet? What is the lifecycle of an applet?"}},{"data":{"ques":"Q250. What is meant by controls and what are different types of controls in AWT / SWT?"}},{"data":{"ques":"Q251. What is a stream and what are the types of Streams and classes of the Streams?"}},{"data":{"ques":"Q252. What is session tracking and how do you track a user session in servlets?"}},{"data":{"ques":"Q253. What is connection pooling?"}},{"data":{"ques":"Q254. Advantage of Collection classes over Arrays ?"}},{"data":{"ques":"Q255. What are the Disadvantages of using Collection Classes over Arrays ?"}},{"data":{"ques":"Q256. Can we call constructor explicitly ?"}},{"data":{"ques":"Q257. Does a class inherit the constructor of its super class?"}},{"data":{"ques":"Q258. What is the difference between float and double?"}},{"data":{"ques":"Q259. What is the difference between >> and >>>?"}},{"data":{"ques":"Q260. What is the difference between System.out ,System.err and System.in?"}},{"data":{"ques":"Q261. Is it possible to compile and run a Java program without writing main( ) method?"}},{"data":{"ques":"Q262. What are different ways of object creation in Java ?"}},{"data":{"ques":"Q263. What is Generalization and Specialization in terms of casting ?"}},{"data":{"ques":"Q264. Can we call the garbage collector explicitly ?"}},{"data":{"ques":"Q265. How does volatile affect code optimization by compiler?"}},{"data":{"ques":"Q266. Do you think that Java should have had pointers ?"}},{"data":{"ques":"Q267. How would you go about debugging a NullPointerException?"}},{"data":{"ques":"Q268. How does Java differ from other programming languages you've worked with?"}},{"data":{"ques":"Q269. Should good code be self-documenting, or is it the responsibility of the developer to document it?"}},{"data":{"ques":"Q270. What are points to consider in terms of access modifier when we are overriding any method?"}},{"data":{"ques":"Q271. what is covariant return type? "}},{"data":{"ques":"Q272. How compiler handles the exceptions in overriding ?"}},{"data":{"ques":"Q273. Why is Java considered Portable Language ?"}},{"data":{"ques":"Q274. Tell something about history of Java ?"}},{"data":{"ques":"Q275. How to find if JVM is 32 or 64 bit from Java program. ?"}},{"data":{"ques":"Q276. Does every class needs to have one non parameterized constructor ?"}},{"data":{"ques":"Q277. Difference between throw and throws ?"}},{"data":{"ques":"Q278. Can we use \"this\" within static method ? Why ?"}},{"data":{"ques":"Q279. Similarity and Difference between static block and static method ?"}},{"data":{"ques":"Q280. What are the platforms supported by Java Programming Language?"}},{"data":{"ques":"Q281. How Java provide high Performance ?"}},{"data":{"ques":"Q282. What is IDE ? List few Java IDE ?"}},{"data":{"ques":"Q283. What is an Object ?"}},{"data":{"ques":"Q284. What is a Class ?"}},{"data":{"ques":"Q285. According to Java Operator precedence, which operator is considered to be with highest precedence?"}},{"data":{"ques":"Q286. What data type Variable can be used in a switch statement ?"}},{"data":{"ques":"Q287. What are the sub classes of Exception class?"}},{"data":{"ques":"Q288. How finally used under Exception Handling?"}},{"data":{"ques":"Q289. What things should be kept in mind while creating your own exceptions in Java?"}},{"data":{"ques":"Q290. What is Comparable Interface?"}},{"data":{"ques":"Q291. Explain Set Interface?"}},{"data":{"ques":"Q292. What is the difference between the Reader/Writer class hierarchy and the InputStream/OutputStream class hierarchy?"}},{"data":{"ques":"Q293. What are use cases?"}},{"data":{"ques":"Q294. Which Java operator is right associative?"}},{"data":{"ques":"Q295. What is the difference between a break statement and a continue statement?"}},{"data":{"ques":"Q296. What is the purpose of the System class?"}},{"data":{"ques":"Q297. Variable of the boolean type is automatically initialized as?"}},{"data":{"ques":"Q298. Can try statements be nested?"}},{"data":{"ques":"Q299. What will happen if static modifier is removed from the signature of the main method?"}},{"data":{"ques":"Q300. What is the Locale class?"}},{"data":{"ques":"Q301. Define Network Programming?"}},{"data":{"ques":"Q302. What are the advantages and Disadvantages of Sockets ?"}},{"data":{"ques":"Q303. What environment variables do I need to set on my machine in order to be able to run Java programs?"}},{"data":{"ques":"Q304. What is Externalizable interface?"}},{"data":{"ques":"Q305. What is the difference between the size and capacity of a Vector?"}},{"data":{"ques":"Q306. What is an enum or enumeration?"}},{"data":{"ques":"Q307. What is constructor chaining and how is it achieved in Java?"}},{"data":{"ques":"Q308. What is the best practice configuration usage for files - pom.xml or settings.xml ?"}},{"data":{"ques":"Q309. Why Java provides default constructor ?"}},{"data":{"ques":"Q310. In a case where there are no instance variables what does the default constructor initialize?"}},{"data":{"ques":"Q311. How can I change the default location of the generated jar when I command \"mvn package\"?"}},{"data":{"ques":"Q312. What is Maven's order of inheritance?"}},{"data":{"ques":"Q313. What is a Mojo?"}},{"data":{"ques":"Q314. How do I determine which POM contains missing transitive dependency?"}},{"data":{"ques":"Q315. Difference between Encapsulation and Data Hiding ?"}},{"data":{"ques":"Q316. Difference between Abstraction and Implementation hiding ?"}},{"data":{"ques":"Q317. What are the features of encapsulation ?"}},{"data":{"ques":"Q318. What are the examples of Abstraction in Java ?"}},{"data":{"ques":"Q319. What are different ways to create String Object? Explain."}},{"data":{"ques":"Q320. Write a method to check if input String is Palindrome?"}},{"data":{"ques":"Q321. Write a method that will remove given character from the String?"}},{"data":{"ques":"Q322. Which String class methods are used to make string upper case or lower case?"}},{"data":{"ques":"Q323. How to convert String to byte array and vice versa?"}},{"data":{"ques":"Q324. Why Char array is preferred over String for storing password?"}},{"data":{"ques":"Q325. Why String is popular HashMap key in Java?"}},{"data":{"ques":"Q326. What ate the getter and setter methods ?"}},{"data":{"ques":"Q327. public class a { public static void main(String args[]){ final String s1=\"job\"; final String s2=\"seeker\"; String s3=s1.concat(s2); String s4=\"jobseeker\"; System.out.println(s3==s4); // Output 1 System.out.println(s3.hashCode()==s4.hashCode()); Output 2 }}What will be the Output 1 and Output 2 ?"}},{"data":{"ques":"Q328. What is the use of HashCode in objects ?"}},{"data":{"ques":"Q329. Difference between Compositions and Inheritance ?"}},{"data":{"ques":"Q330. Will finally be called always if all code has been kept in try block ?"}},{"data":{"ques":"Q331. Will the static block be executed in the following code ? Why ?class Test{ static { System.out.println(\"Why I am not executing \"); } public static final int param=20;}public class Demo { public static void main(String[] args) { System.out.println(Test.param); }}"}},{"data":{"ques":"Q332. Will static block for Test Class execute in the following code ? class Test{ static { System.out.println(\"Executing Static Block.\"); } public final int param=20; public int getParam(){ return param; }}public class Demo { public static void main(String[] args) { System.out.println(new Test().param); }}"}},{"data":{"ques":"Q333. What does String intern() method do?"}},{"data":{"ques":"Q334. Will the following program display \"Buggy Bread\" ?class Test{ static void display(){ System.out.println(\"Buggy Bread\"); }}class Demo{ public static void main(String... args){ Test t = null; t.display(); }}"}},{"data":{"ques":"Q335. How substring() method of String class create memory leaks?"}},{"data":{"ques":"Q336. Write a program to reverse a string iteratively and recursively ?"}},{"data":{"ques":"Q337. If you have access to a function that returns a random integer from one to five, write another function which returns a random integer from one to seven."}},{"data":{"ques":"Q338. Write a method to convert binary to a number ?"}},{"data":{"ques":"Q339. What will the following code print ?String s1 = \"Buggy Bread\"; String s2 = \"Buggy Bread\"; if(s1 == s2) System.out.println(\"equal 1\"); String n1 = new String(\"Buggy Bread\"); String n2 = new String(\"Buggy Bread\"); if(n1 == n2) System.out.println(\"equal 2\"); "}},{"data":{"ques":"Q340. Difference between new operator and Class.forName().newInstance() ?"}},{"data":{"ques":"Q341. What is Java bytecode ?"}},{"data":{"ques":"Q342. How to find whether a given integer is odd or even without use of modules operator in java?"}},{"data":{"ques":"Q343. Is JVM a overhead ? "}},{"data":{"ques":"Q344. Can we use Ordered Set for performing Binary Search ?"}},{"data":{"ques":"Q345. What is Byte Code ? Why Java's intermediary Code is called Byte Code ?"}},{"data":{"ques":"Q346. Difference between ArrayList and LinkedList ?"}},{"data":{"ques":"Q347. If you are given a choice to use either ArrayList and LinkedList, Which one would you use and Why ?"}},{"data":{"ques":"Q348. What are the pre-requisite for the collection to perform Binary Search ?"}},{"data":{"ques":"Q349. Can you provide some implementation of a Dictionary having large number of words ? "}},{"data":{"ques":"Q350. Difference between PATH and CLASSPATH ?"}},{"data":{"ques":"Q351. Name few access and non access Class Modifiers ?"}},{"data":{"ques":"Q352. Which Java collection class can be used to maintain the entries in the order in which they were last accessed?"}},{"data":{"ques":"Q353. Is it legal to initialize List like this ?LinkedList l=new LinkedList(); "}},{"data":{"ques":"Q354. Which of the following syntax is correct ?import static java.lang.System.*;or static import java.lang.System.*;"}},{"data":{"ques":"Q355. What will be the output of following code ?public static void main(String[] args) { int x = 10; int y; if (x < 100) y = x / 0; if (x >= 100) y = x * 0; System.out.println(\"The value of y is: \" + y); }"}},{"data":{"ques":"Q356. What will be the output of following Code ?class BuggyBread { public static void main(String[] args) { String s2 = \"I am unique!\"; String s5 = \"I am unique!\"; System.out.println(s2 == s5); } }"}},{"data":{"ques":"Q357. What will be the output of following code ?class BuggyBread2 { private static int counter = 0; void BuggyBread2() { counter = 5; } BuggyBread2(int x){ counter = x; } public static void main(String[] args) { BuggyBread2 bg = new BuggyBread2(); System.out.println(counter); } }"}},{"data":{"ques":"Q358. What will be the output of following code ?class BuggyBread1 { public String method() { return \"Base Class - BuggyBread1\"; }}class BuggyBread2 extends BuggyBread1{ private static int counter = 0; public String method(int x) { return \"Derived Class - BuggyBread2\"; } public static void main(String[] args) { BuggyBread1 bg = new BuggyBread2(); System.out.println(bg.method()); } }"}},{"data":{"ques":"Q359. What are RESTful Web Services ?"}},{"data":{"ques":"Q360. Which markup languages can be used in restful web services ? "}},{"data":{"ques":"Q361. Difference between Inner and Outer Join ?"}},{"data":{"ques":"Q362. What is a Cursor ?"}},{"data":{"ques":"Q363. What is database deadlock ? How can we avoid them?"}},{"data":{"ques":"Q364. What are temp tables ?"}},{"data":{"ques":"Q365. Why Web services use HTTP as the communication protocol ?"}},{"data":{"ques":"Q366. what will be the output of this code ?public static void main(String[] args) { StringBuffer s1=new StringBuffer(\"Buggy\"); test(s1); System.out.println(s1); } private static void test(StringBuffer s){ s.append(\"Bread\"); }"}},{"data":{"ques":"Q367. what will be the output of this code ?public static void main(String[] args) { String s1=new String(\"Buggy\"); test(s1); System.out.println(s1); } private static void test(StringBuffer s){ s.append(\"Bread\"); }"}},{"data":{"ques":"Q368. what will be the output of this code ?public static void main(String[] args) { StringBuffer s1=new StringBuffer(\"Buggy\"); test(s1); System.out.println(s1); } private static void test(StringBuffer s){ s=new StringBuffer(\"Bread\"); }"}},{"data":{"ques":"Q369. what will be the output ?class Animal { public void eat() throws Exception { }}class Dog2 extends Animal { public void eat(){} public static void main(){ Animal an = new Dog2(); an.eat(); }}"}},{"data":{"ques":"Q370. What are advantages of using Servlets over CGI ?"}},{"data":{"ques":"Q371. gfdddddddddddddddddddddddd"}},{"data":{"ques":"Q372. Does SQL allow null values ? Can we use it within Where clause ?"}},{"data":{"ques":"Q373. Can we add duplicate keys in a HashMap ? What will happen if we attempt to add duplicate values ?"}},{"data":{"ques":"Q374. What is the use of HTTPSession in relation to http protocol ?"}},{"data":{"ques":"Q375. Why using cookie to store session info is a better idea than just using session info in the request ?"}},{"data":{"ques":"Q376. What are different types of cookies ?"}},{"data":{"ques":"Q377. http protocol is by default ... ?"}},{"data":{"ques":"Q378. Can finally block throw an exception ?"}},{"data":{"ques":"Q379. Can we have try and catch blocks within finally ?"}},{"data":{"ques":"Q380. Which of the following is a canonical path ?1. C:\\directory\\..\\directory\\file.txt2. C:\\directory\\subDirectory1\\directory\\file.txt3. \\directory\\file.txt"}},{"data":{"ques":"Q381. What will the following code print when executed on Windows ?public static void main(String[] args){ String parent = null; File file = new File(\"/file.txt\"); System.out.println(file.getPath()); System.out.println(file.getAbsolutePath()); try { System.out.println(file.getCanonicalPath()); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } }"}},{"data":{"ques":"Q382. What will be the output of following code ?public static void main(String[] args){ String name = null; File file = new File(\"/folder\", name); System.out.print(file.exists()); }"}},{"data":{"ques":"Q383. What will be the output of following code ?public static void main(String[] args){ String parent = null; File file = new File(parent, \"myfile.txt\"); try { file.createNewFile(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } }"}},{"data":{"ques":"Q384. What will be the output of following code ?public static void main(String[] args){ String child = null; File file = new File(\"/folder\", child); try { file.createNewFile(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } }"}},{"data":{"ques":"Q385. What will be the output of following code, assuming that currently we are in c:\\Project ? public static void main(String[] args){ String child = null; File file = new File(\"../file.txt\"); System.out.println(file.getPath()); System.out.println(file.getAbsolutePath()); try { System.out.println(file.getCanonicalPath()); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } }"}},{"data":{"ques":"Q386. Which is the abstract parent class of FileWriter ?"}},{"data":{"ques":"Q387. Which class is used to read streams of characters from a file?"}},{"data":{"ques":"Q388. Which class is used to read streams of raw bytes from a file?"}},{"data":{"ques":"Q389. Which is the Parent class of FileInputStream ?"}},{"data":{"ques":"Q390. Which of the following code is correct ?a. FileWriter fileWriter = new FileWriter(\"../file.txt\");File file = new File(fileWriter );BufferedWriter bufferedOutputWriter = new BufferedWriter(fileWriter);b. BufferedWriter bufferedOutputWriter = new BufferedWriter(\"../file.txt\");File file = new File(bufferedOutputWriter );FileWriter fileWriter = new FileWriter(file);c. File file = new File(\"../file.txt\");FileWriter fileWriter = new FileWriter(file);BufferedWriter bufferedOutputWriter = new BufferedWriter(fileWriter);d.File file = new File(\"../file.txt\");BufferedWriter bufferedOutputWriter = new BufferedWriter(file); FileWriter fileWriter = new FileWriter(bufferedOutputWriter );"}},{"data":{"ques":"Q391. Which exception should be handled in the following code ?File file = new File(\"../file.txt\");FileWriter fileWriter = new FileWriter(file);"}},{"data":{"ques":"Q392. Which exceptions should be handled with the following code ?FileOutputStream fileOutputStream = new FileOutputStream(new File(\"newFile.txt\"));"}},{"data":{"ques":"Q393. Will this code compile fine ?ObjectOutputStream objectOutputStream = new ObjectOutputStream(new FileOutputStream(new File(\"newFile.txt\")));"}},{"data":{"ques":"Q394. What is the problem with this code ?class BuggyBread1 { private BuggyBread2 buggybread2; public static void main(String[] args){ try { BuggyBread1 buggybread1 = new BuggyBread1(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(new FileOutputStream(new File(\"newFile.txt\"))); objectOutputStream.writeObject(buggybread1); } catch (Exception e) { // TODO Auto-generated catch block e.printStackTrace(); } }}"}},{"data":{"ques":"Q395. Will this code run fine if BuggyBread2 doesn't implement Serializable interface ?class BuggyBread1 implements Serializable{ private BuggyBread2 buggybread2 = new BuggyBread2(); public static void main(String[] args){ try { BuggyBread1 buggybread1 = new BuggyBread1(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(new FileOutputStream(new File(\"newFile.txt\"))); objectOutputStream.writeObject(buggybread1); } catch (Exception e) { // TODO Auto-generated catch block e.printStackTrace(); } }}"}},{"data":{"ques":"Q396. Will this code work fine if BuggyBread2 doesn't implement Serializable ?class BuggyBread1 extends BuggyBread2 implements Serializable{ private int x = 5; public static void main(String[] args){ try { BuggyBread1 buggybread1 = new BuggyBread1(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(new FileOutputStream(new File(\"newFile.txt\"))); objectOutputStream.writeObject(buggybread1); } catch (Exception e) { // TODO Auto-generated catch block e.printStackTrace(); } }}"}},{"data":{"ques":"Q397. Can we compose the Parent Class object like this ?class BuggyBread1 extends BuggyBread2 { private BuggyBread2 buggybread2; public static void main(String[] args){ buggybread2 = new BuggyBread2(); }}"}},{"data":{"ques":"Q398. Will this code Work ? If not , Why ?java.util.Calendar c = new java.util.Calendar();"}},{"data":{"ques":"Q399. Is java.util.Date an abstract Class ? Is java.util.Calendar an abstract Class ?"}},{"data":{"ques":"Q400. What will the following code print ?java.util.Calendar c = java.util.Calendar.getInstance();c.add(Calendar.MONTH, 5);System.out.println(c.getTime());"}},{"data":{"ques":"Q401. Which of the following code is correct ?a. DateFormat df = DateFormat.getInstance();b. DateFormat df = DateFormat.getDateInstance();c. DateFormat df = DateFormat.getInstance(DateFormat.FULL);d. DateFormat df = DateFormat.getDateInstance(DateFormat.FULL);"}},{"data":{"ques":"Q402. What is the use of parse method in DateFormat ?"}},{"data":{"ques":"Q403. Which of the following is not a valid java.util.Locale initialization ?a. new Locale ()b. new Locale ( String language )c. new Locale ( String language , String country )"}},{"data":{"ques":"Q404. Which of the following is not a valid NumberFormat initialization ?a. NumberFormat.getInstance()b. NumberFormat.getDateInstance()c. NumberFormat.getCurrencyInstance()d. NumberFormat.getNumberInstance()"}},{"data":{"ques":"Q405. What will the following code print ?public static void main(String[] args){ Integer i1 = new Integer(\"1\"); Integer i2 = new Integer(\"2\"); Integer i3 = Integer.valueOf(\"3\"); int i4 = i1 + i2 + i3; System.out.println(i4); }"}},{"data":{"ques":"Q406. Which of the following syntax are correct ?a. LinkedList l=new LinkedList();b. List l=new LinkedList();c. LinkedList l=new LinkedList();d. List l = new LinkedList();"}},{"data":{"ques":"Q407. Which of the following code is correct ?a. Date date = DateFormat.newInstance(DateFormat.LONG, Locale.US).parse(str); b. Date date = DateFormat.newInstance(DateFormat.LONG, Locale.US).format(str); c. Date date = DateFormat.getDateInstance(DateFormat.LONG, Locale.US).parse(str);"}},{"data":{"ques":"Q408. What's wrong with this code ?public static void main(String[] args) { String regex = \"(\\\\w+)*\"; String s = \"Java is a programming language.\"; Pattern pattern = Pattern.compile(regex); Matcher matcher = pattern.matcher(s); while (matcher.next()) { System.out.println(\"The e-mail id is: \" + matcher.group()); }}"}},{"data":{"ques":"Q409. Which methods of the Pattern class have equivalent methods in the String class? "}},{"data":{"ques":"Q410. Can we compare Integers by using equals() in Java ?"}},{"data":{"ques":"Q411. What is comparator interface used for ?"}},{"data":{"ques":"Q412. Which are the sorted collections ?"}},{"data":{"ques":"Q413. What is rule regarding overriding equals and hasCode method ?"}},{"data":{"ques":"Q414. What is the difference between Collection and Collections ?"}},{"data":{"ques":"Q415. Is Java a statically typed or dynamically typed language ?"}},{"data":{"ques":"Q416. What do you mean by \"Java is a statically typed language\" ?"}},{"data":{"ques":"Q417. How can we reverse the order in the TreeMap ?"}},{"data":{"ques":"Q418. TreeMap orders the elements on which field ?"}},{"data":{"ques":"Q419. How TreeMap orders the elements if the Key is a String ?"}},{"data":{"ques":"Q420. Can we add heterogeneous elements into TreeMap ?"}},{"data":{"ques":"Q421. Will it create any problem if We add elements with key as user defined object into the TreeMap ?"}},{"data":{"ques":"Q422. Can we null keys in TreeMap ?"}},{"data":{"ques":"Q423. Can value be null in TreeMap ?"}},{"data":{"ques":"Q424. Which interface TreeMap implements ?"}},{"data":{"ques":"Q425. Do we have form beans in Struts 2 ?"}},{"data":{"ques":"Q426. What is a ConcurrentHashMap ?"}},{"data":{"ques":"Q427. What is the use of double checked locking in createInstance() of Singleton class?Double checked locking code:public static Singleton createInstance() { if(singleton == null){ synchronized(Singleton.class) { if(singleton == null) { singleton = new Singleton(); } } } return singleton;}Single checked locking code:public static Singleton createInstance() { synchronized(Singleton.class) { if(singleton == null) { singleton = new Singleton(); } } return singleton;}What advantage does the first code offer compared to the second ?"}},{"data":{"ques":"Q428. Why are Getter and Setter better than directly changing and retrieving fields ?"}},{"data":{"ques":"Q429. Can we overload main method in Java ?"}},{"data":{"ques":"Q430. What the Bean scopes provided by Spring ?"}},{"data":{"ques":"Q431. What are the various Auto Wiring types in Spring ?"}},{"data":{"ques":"Q432. Difference between first level and second level cache in hibernate ?"}},{"data":{"ques":"Q433. What are the the methods to clear cache in Hibernate ?"}},{"data":{"ques":"Q434. What are different types of second level cache ?"}},{"data":{"ques":"Q435. Can we disable first level cache ? What should one do if we don't want an object to be cached ?"}},{"data":{"ques":"Q436. How to configure second level cache in Hibernate ?"}},{"data":{"ques":"Q437. What is Hibernate ?"}},{"data":{"ques":"Q438. What are the advantages of Hibernate ?"}},{"data":{"ques":"Q439. What are the different types of inheritance in Hibernate ?"}},{"data":{"ques":"Q440. What is the purpose of dialect configured in Hibernate configuration file ?"}},{"data":{"ques":"Q441. Please specify in what sequence the objects of following classes will be created ?Session , SessionFactory, Query , Configuration"}},{"data":{"ques":"Q442. What are different types of associations in Hibernate ?"}},{"data":{"ques":"Q443. What are the configuration files in Hibernate ?"}},{"data":{"ques":"Q444. What are the contents of Hibernate configuration file ( hibernate.cfg.xml ) ?"}},{"data":{"ques":"Q445. What are the Core Interfaces of Hibernate Framework ? "}},{"data":{"ques":"Q446. What are collection types in Hibernate ?"}},{"data":{"ques":"Q447. Difference between load and get ?"}},{"data":{"ques":"Q448. What is lazy fetching in Hibernate ?"}},{"data":{"ques":"Q449. Different types of Hibernate Instance States ?"}},{"data":{"ques":"Q450. Is It Good to use Reflection in an application ? Why ?"}},{"data":{"ques":"Q451. Why is Reflection slower ?"}},{"data":{"ques":"Q452. When should we use prototype scope and singleton scope for beans ?"}},{"data":{"ques":"Q453. Difference between Assert and Verify ?"}},{"data":{"ques":"Q454. What is the difference between ArrayList and LinkedList ?"}},{"data":{"ques":"Q455. Which class elements are not persisted ?"}},{"data":{"ques":"Q456. Which annotations are used in Hibernate ?"}},{"data":{"ques":"Q457. What entries we make in the hibernate config file if we are not using hbm files but Annotations ?"}},{"data":{"ques":"Q458. How many SessionFactory and Session objects are created ?"}},{"data":{"ques":"Q459. What is the way to rollback transaction if something goes wrong using hibernate API ? "}},{"data":{"ques":"Q460. What is the use of hbm2ddl Configuration in Hibernate ?"}},{"data":{"ques":"Q461. What is the difference between these 2 annotations ?@Entity@Entity ( name=\"EMPLOYEES\" )"}},{"data":{"ques":"Q462. \"What is the difference between these 2 annotations ?@Entity ( name =\"EMPLOYEES\")@Entity @Table ( name=\"\"EMPLOYEES\"\" )@Entity ( name=\"EMP\")@Table ( name=\"EMPLPYEES\" )"}},{"data":{"ques":"Q463. What are the different ID generating strategies using @GeneratedValue annotation ?"}},{"data":{"ques":"Q464. How to do Eager loading in Hibernate ?"}},{"data":{"ques":"Q465. What is Lazy Initialization in Hibernate ?"}},{"data":{"ques":"Q466. What are the ways to avoid LazyInitializationException ?"}},{"data":{"ques":"Q467. What is cascade ?"}},{"data":{"ques":"Q468. What are the different Cascade types ?"}},{"data":{"ques":"Q469. Which type of associated Entities are Eagerly loaded by Default ?"}},{"data":{"ques":"Q470. After which Hibernate version , related Entities are initialized lazily ?"}},{"data":{"ques":"Q471. Can we declare Entity class as final ?"}},{"data":{"ques":"Q472. What are the restrictions for the entity classes ?"}},{"data":{"ques":"Q473. What is the difference between int[] x; and int x[]; ?"}},{"data":{"ques":"Q474. What are the annotations used in Junit with Junit4 ?"}},{"data":{"ques":"Q475. What is asynchronous I/O ?"}},{"data":{"ques":"Q476. If there is a conflict between Base Class Method definition and Interface Default method definition, Which definition is Picked ?"}},{"data":{"ques":"Q477. What are new features introduced with Java 8 ?"}},{"data":{"ques":"Q478. Can we have a default method without a Body ?"}},{"data":{"ques":"Q479. Does java allow implementation of multiple interfaces having Default methods with Same name and Signature ?"}},{"data":{"ques":"Q480. What are Default Methods ?"}},{"data":{"ques":"Q481. Can we have a default method definition in the interface without specifying the keyword \"default\" ? "}},{"data":{"ques":"Q482. Can a class implement two Interfaces having default method with same name and signature ?public interface DefaultMethodInterface { default public void defaultMethod(){ System.out.println(\"DefaultMethodInterface\"); }}public interface DefaultMethodInterface2 { default public void defaultMethod(){ System.out.println(\"DefaultMethodInterface2\"); }}public class HelloJava8 implements DefaultMethodInterface,DefaultMethodInterface2 { public static void main(String[] args){ DefaultMethodInterface defMethIn = new HelloJava8(); defMethIn.defaultMethod(); }}"}},{"data":{"ques":"Q483. What If we make the method as abstract in another Interface ?public interface DefaultMethodInterface { default public void defaultMethod(){ System.out.println(\"DefaultMethodInterface\"); }}public interface DefaultMethodInterface2 { public void defaultMethod(){ System.out.println(\"DefaultMethodInterface2\"); }}public class HelloJava8 implements DefaultMethodInterface,DefaultMethodInterface2 { public static void main(String[] args){ DefaultMethodInterface defMethIn = new HelloJava8(); defMethIn.defaultMethod(); }}"}},{"data":{"ques":"Q484. What if we override the conflicting method in the Class ?public interface DefaultMethodInterface { default public void defaultMethod(){ System.out.println(\"DefaultMethodInterface\"); }}public interface DefaultMethodInterface2 { default public void defaultMethod(){ System.out.println(\"DefaultMethodInterface2\"); }}public class HelloJava8 implements DefaultMethodInterface,DefaultMethodInterface2 { public static void main(String[] args){ DefaultMethodInterface defMethIn = new HelloJava8(); defMethIn.defaultMethod(); } public void defaultMethod(){ System.out.println(\"HelloJava8\"); }}"}},{"data":{"ques":"Q485. What will happen if there is a default method conflict as mentioned above and we have specified the same signature method in the base class instead of overriding in the existing class ?"}},{"data":{"ques":"Q486. If a method definition has been specified in Class , its Base Class , and the interface which the class is implementing, Which definition will be picked if we try to access it using Interface Reference and Class object ? "}},{"data":{"ques":"Q487. If a method definition has been specified in the Base Class and the interface which the class is implementing, Which definition will be picked if we try to access it using Interface Reference and Class object ? "}},{"data":{"ques":"Q488. Can we use static method definitions in Interfaces ?"}},{"data":{"ques":"Q489. Can we access Interface static method using Interface references ?"}},{"data":{"ques":"Q490. Can we have default method with same name and signature in the derived Interface as the static method in base Interface and vice versa ?"}},{"data":{"ques":"Q491. What is a Lambda Expression ? What's its use ?"}},{"data":{"ques":"Q492. Difference between Predicate, Supplier and Consumer ? "}},{"data":{"ques":"Q493. What does the following lambda expression means ?helloJava8 ( x-> x%2 )"}},{"data":{"ques":"Q494. What is the difference between namenode and datanode in Hadoop? "}},{"data":{"ques":"Q495. Write a program to see if the number is prefect number or not ?"}},{"data":{"ques":"Q496. Difference between a Pointer and a Reference ?"}},{"data":{"ques":"Q497. Difference between TCP and UDP ?"}},{"data":{"ques":"Q498. What things you would care about to improve the performance of Application if its identified that its DB communication that needs to be improved ?"}},{"data":{"ques":"Q499. Explain Singleton Design Pattern ?"}},{"data":{"ques":""}}]