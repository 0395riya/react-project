[{"data":{"ques":"Q1. What is C language?","ans":""}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":"Q1. What is C language?","ans":" "}},{"data":{"ques":"Q1. What is C language?","ans":"Ans:"}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":"Q1. What is C language?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":"Q1. What is C language?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":"Q1. What is C language?","ans":" "}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":"Q1. What is C language?","ans":"1"}},{"data":{"ques":"Q1. What is C language?","ans":"12"}},{"data":{"ques":"Q1. What is C language?","ans":"123"}},{"data":{"ques":"Q1. What is C language?","ans":"1234"}},{"data":{"ques":"Q1. What is C language?","ans":"12345"}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: "}},{"data":{"ques":"Q1. What is C language?","ans":" "}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":"Q1. What is C language?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":"Q1. What is C language?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":"Q1. What is C language?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":"Q1. What is C language?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":"Q1. What is C language?","ans":"Related Interview Questions..."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":""}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":" "}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans:"}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":" "}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"1"}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"12"}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"123"}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"1234"}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"12345"}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: "}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":" "}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":"Q2. When is a “switch” statement preferable over an “if” statement?","ans":"Related Interview Questions..."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":""}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":" "}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans:"}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":" "}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"1"}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"12"}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"123"}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"1234"}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"12345"}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: "}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":" "}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":"Q3. What is spaghetti programming?","ans":"Related Interview Questions..."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":""}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":" "}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans:"}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":" "}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"1"}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"12"}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"123"}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"1234"}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"12345"}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: "}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":" "}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":"Q4. How do you construct an increment statement or decrement statement in C?","ans":"Related Interview Questions..."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":""}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":" "}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans:"}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":" "}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"1"}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"12"}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"123"}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"1234"}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"12345"}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: "}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":" "}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":"Q5. What is the difference between Call by Value and Call by Reference?","ans":"Related Interview Questions..."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":""}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":" "}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans:"}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":" "}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"1"}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"12"}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"123"}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"1234"}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"12345"}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: "}},{"data":{"ques":"Q6. What is a sequential access file?","ans":" "}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":"Q6. What is a sequential access file?","ans":"Related Interview Questions..."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":""}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":" "}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans:"}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":" "}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"1"}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"12"}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"123"}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"1234"}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"12345"}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: "}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":" "}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":"Q7. Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?","ans":"Related Interview Questions..."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":""}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":" "}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans:"}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":" "}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"1"}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"12"}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"123"}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"1234"}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"12345"}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: "}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":" "}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":"Q8. What is the equivalent code of the following statement in WHILE LOOP format?","ans":"Related Interview Questions..."}},{"data":{"ques":"Q9. What is a stack?","ans":""}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":"Q9. What is a stack?","ans":" "}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans:"}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":"Q9. What is a stack?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":"Q9. What is a stack?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":"Q9. What is a stack?","ans":" "}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":"Q9. What is a stack?","ans":"1"}},{"data":{"ques":"Q9. What is a stack?","ans":"12"}},{"data":{"ques":"Q9. What is a stack?","ans":"123"}},{"data":{"ques":"Q9. What is a stack?","ans":"1234"}},{"data":{"ques":"Q9. What is a stack?","ans":"12345"}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: "}},{"data":{"ques":"Q9. What is a stack?","ans":" "}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":"Q9. What is a stack?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":"Q9. What is a stack?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":"Q9. What is a stack?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":"Q9. What is a stack?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":"Q9. What is a stack?","ans":"Related Interview Questions..."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":""}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":" "}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans:"}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":" "}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"1"}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"12"}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"123"}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"1234"}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"12345"}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: "}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":" "}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" How do you declare a variable that will hold string values?","ans":"Related Interview Questions..."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":""}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":" "}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans:"}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":" "}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"1"}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"12"}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"123"}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"1234"}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"12345"}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: "}},{"data":{"ques":" What is variable initialization and why is it important?","ans":" "}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What is variable initialization and why is it important?","ans":"Related Interview Questions..."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":""}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":" "}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans:"}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":" "}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"1"}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"12"}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"123"}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"1234"}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"12345"}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: "}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":" "}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" In C programming, how do you insert quote characters (‘ and “) into the output screen?","ans":"Related Interview Questions..."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":""}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":" "}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans:"}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":" "}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"1"}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"12"}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"123"}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"1234"}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"12345"}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: "}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":" "}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What is the use of a ‘\\0’ character?","ans":"Related Interview Questions..."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":""}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":" "}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans:"}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":" "}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"1"}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"12"}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"123"}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"1234"}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"12345"}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: "}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":" "}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What is the difference between the = symbol and == symbol?","ans":"Related Interview Questions..."}},{"data":{"ques":" What is the modulus operator?","ans":""}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What is the modulus operator?","ans":" "}},{"data":{"ques":" What is the modulus operator?","ans":"Ans:"}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What is the modulus operator?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What is the modulus operator?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What is the modulus operator?","ans":" "}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What is the modulus operator?","ans":"1"}},{"data":{"ques":" What is the modulus operator?","ans":"12"}},{"data":{"ques":" What is the modulus operator?","ans":"123"}},{"data":{"ques":" What is the modulus operator?","ans":"1234"}},{"data":{"ques":" What is the modulus operator?","ans":"12345"}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: "}},{"data":{"ques":" What is the modulus operator?","ans":" "}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What is the modulus operator?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What is the modulus operator?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What is the modulus operator?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What is the modulus operator?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What is the modulus operator?","ans":"Related Interview Questions..."}},{"data":{"ques":" What is a nested loop?","ans":""}},{"data":{"ques":" What is a nested loop?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What is a nested loop?","ans":" "}},{"data":{"ques":" What is a nested loop?","ans":"Ans:"}},{"data":{"ques":" What is a nested loop?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What is a nested loop?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What is a nested loop?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What is a nested loop?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What is a nested loop?","ans":" "}},{"data":{"ques":" What is a nested loop?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What is a nested loop?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What is a nested loop?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What is a nested loop?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What is a nested loop?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What is a nested loop?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What is a nested loop?","ans":"1"}},{"data":{"ques":" What is a nested loop?","ans":"12"}},{"data":{"ques":" What is a nested loop?","ans":"123"}},{"data":{"ques":" What is a nested loop?","ans":"1234"}},{"data":{"ques":" What is a nested loop?","ans":"12345"}},{"data":{"ques":" What is a nested loop?","ans":"Ans: "}},{"data":{"ques":" What is a nested loop?","ans":" "}},{"data":{"ques":" What is a nested loop?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What is a nested loop?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What is a nested loop?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What is a nested loop?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What is a nested loop?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What is a nested loop?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What is a nested loop?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What is a nested loop?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What is a nested loop?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What is a nested loop?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What is a nested loop?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What is a nested loop?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What is a nested loop?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What is a nested loop?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What is a nested loop?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What is a nested loop?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What is a nested loop?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What is a nested loop?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What is a nested loop?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What is a nested loop?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What is a nested loop?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What is a nested loop?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What is a nested loop?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What is a nested loop?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What is a nested loop?","ans":"Related Interview Questions..."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":""}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":" "}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans:"}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":" "}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"1"}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"12"}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"123"}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"1234"}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"12345"}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: "}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":" "}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" Which of the following operators is incorrect and why? ( >=, <=, <>, ==)","ans":"Related Interview Questions..."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":""}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":" "}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans:"}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":" "}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"1"}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"12"}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"123"}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"1234"}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"12345"}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: "}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":" "}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" Compare and contrast compilers from interpreters.","ans":"Related Interview Questions..."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":""}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":" "}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans:"}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":" "}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"1"}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"12"}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"123"}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"1234"}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"12345"}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: "}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":" "}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" Can the curly brackets { } be used to enclose a single line of code?","ans":"Related Interview Questions..."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":""}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":" "}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans:"}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":" "}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"1"}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"12"}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"123"}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"1234"}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"12345"}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: "}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":" "}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What are header files and what are its uses in C programming?","ans":"Related Interview Questions..."}},{"data":{"ques":" What is syntax error?","ans":""}},{"data":{"ques":" What is syntax error?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What is syntax error?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What is syntax error?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What is syntax error?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What is syntax error?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What is syntax error?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What is syntax error?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What is syntax error?","ans":" "}},{"data":{"ques":" What is syntax error?","ans":"Ans:"}},{"data":{"ques":" What is syntax error?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What is syntax error?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What is syntax error?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What is syntax error?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What is syntax error?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What is syntax error?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What is syntax error?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What is syntax error?","ans":" "}},{"data":{"ques":" What is syntax error?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What is syntax error?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What is syntax error?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What is syntax error?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What is syntax error?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What is syntax error?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What is syntax error?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What is syntax error?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What is syntax error?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What is syntax error?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What is syntax error?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What is syntax error?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What is syntax error?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What is syntax error?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What is syntax error?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What is syntax error?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What is syntax error?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What is syntax error?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What is syntax error?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What is syntax error?","ans":"1"}},{"data":{"ques":" What is syntax error?","ans":"12"}},{"data":{"ques":" What is syntax error?","ans":"123"}},{"data":{"ques":" What is syntax error?","ans":"1234"}},{"data":{"ques":" What is syntax error?","ans":"12345"}},{"data":{"ques":" What is syntax error?","ans":"Ans: "}},{"data":{"ques":" What is syntax error?","ans":" "}},{"data":{"ques":" What is syntax error?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What is syntax error?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What is syntax error?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What is syntax error?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What is syntax error?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What is syntax error?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What is syntax error?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What is syntax error?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What is syntax error?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What is syntax error?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What is syntax error?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What is syntax error?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What is syntax error?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What is syntax error?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What is syntax error?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What is syntax error?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What is syntax error?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What is syntax error?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What is syntax error?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What is syntax error?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What is syntax error?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What is syntax error?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What is syntax error?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What is syntax error?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What is syntax error?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What is syntax error?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What is syntax error?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What is syntax error?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What is syntax error?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What is syntax error?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What is syntax error?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What is syntax error?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What is syntax error?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What is syntax error?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What is syntax error?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What is syntax error?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What is syntax error?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What is syntax error?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What is syntax error?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What is syntax error?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What is syntax error?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What is syntax error?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What is syntax error?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What is syntax error?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What is syntax error?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What is syntax error?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What is syntax error?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What is syntax error?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What is syntax error?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What is syntax error?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What is syntax error?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What is syntax error?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What is syntax error?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What is syntax error?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What is syntax error?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What is syntax error?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What is syntax error?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What is syntax error?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What is syntax error?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What is syntax error?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What is syntax error?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What is syntax error?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What is syntax error?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What is syntax error?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What is syntax error?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What is syntax error?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What is syntax error?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What is syntax error?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What is syntax error?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What is syntax error?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What is syntax error?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What is syntax error?","ans":"Related Interview Questions..."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":""}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":" "}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans:"}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":" "}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"1"}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"12"}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"123"}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"1234"}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"12345"}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: "}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":" "}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Related Interview Questions..."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":""}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":" "}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans:"}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":" "}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"1"}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"12"}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"123"}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"1234"}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"12345"}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: "}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":" "}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What are variables and it what way is it different from constants?","ans":"Related Interview Questions..."}},{"data":{"ques":" How do you access the values within an array?","ans":""}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" How do you access the values within an array?","ans":" "}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans:"}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" How do you access the values within an array?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" How do you access the values within an array?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" How do you access the values within an array?","ans":" "}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" How do you access the values within an array?","ans":"1"}},{"data":{"ques":" How do you access the values within an array?","ans":"12"}},{"data":{"ques":" How do you access the values within an array?","ans":"123"}},{"data":{"ques":" How do you access the values within an array?","ans":"1234"}},{"data":{"ques":" How do you access the values within an array?","ans":"12345"}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: "}},{"data":{"ques":" How do you access the values within an array?","ans":" "}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" How do you access the values within an array?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" How do you access the values within an array?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" How do you access the values within an array?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" How do you access the values within an array?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" How do you access the values within an array?","ans":"Related Interview Questions..."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":""}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":" "}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans:"}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":" "}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"1"}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"12"}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"123"}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"1234"}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"12345"}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: "}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":" "}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" Can I use  “int” data type to store the value 32768? Why?","ans":"Related Interview Questions..."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":""}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":" "}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans:"}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":" "}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"1"}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"12"}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"123"}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"1234"}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"12345"}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: "}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":" "}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" Can two or more operators such as \\n and \\t be combined in a single line of program code?","ans":"Related Interview Questions..."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":""}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":" "}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans:"}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":" "}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"1"}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"12"}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"123"}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"1234"}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"12345"}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: "}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":" "}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" Why is it that not all header files are declared in every C program?","ans":"Related Interview Questions..."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":""}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":" "}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans:"}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":" "}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"1"}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"12"}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"123"}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"1234"}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"12345"}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: "}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":" "}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" When is the “void” keyword used in a function?","ans":"Related Interview Questions..."}},{"data":{"ques":" What are compound statements?","ans":""}},{"data":{"ques":" What are compound statements?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What are compound statements?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What are compound statements?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What are compound statements?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What are compound statements?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What are compound statements?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What are compound statements?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What are compound statements?","ans":" "}},{"data":{"ques":" What are compound statements?","ans":"Ans:"}},{"data":{"ques":" What are compound statements?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What are compound statements?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What are compound statements?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What are compound statements?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What are compound statements?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What are compound statements?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What are compound statements?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What are compound statements?","ans":" "}},{"data":{"ques":" What are compound statements?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What are compound statements?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What are compound statements?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What are compound statements?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What are compound statements?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What are compound statements?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What are compound statements?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What are compound statements?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What are compound statements?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What are compound statements?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What are compound statements?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What are compound statements?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What are compound statements?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What are compound statements?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What are compound statements?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What are compound statements?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What are compound statements?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What are compound statements?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What are compound statements?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What are compound statements?","ans":"1"}},{"data":{"ques":" What are compound statements?","ans":"12"}},{"data":{"ques":" What are compound statements?","ans":"123"}},{"data":{"ques":" What are compound statements?","ans":"1234"}},{"data":{"ques":" What are compound statements?","ans":"12345"}},{"data":{"ques":" What are compound statements?","ans":"Ans: "}},{"data":{"ques":" What are compound statements?","ans":" "}},{"data":{"ques":" What are compound statements?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What are compound statements?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What are compound statements?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What are compound statements?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What are compound statements?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What are compound statements?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What are compound statements?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What are compound statements?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What are compound statements?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What are compound statements?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What are compound statements?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What are compound statements?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What are compound statements?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What are compound statements?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What are compound statements?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What are compound statements?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What are compound statements?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What are compound statements?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What are compound statements?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What are compound statements?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What are compound statements?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What are compound statements?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What are compound statements?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What are compound statements?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What are compound statements?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What are compound statements?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What are compound statements?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What are compound statements?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What are compound statements?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What are compound statements?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What are compound statements?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What are compound statements?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What are compound statements?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What are compound statements?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What are compound statements?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What are compound statements?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What are compound statements?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What are compound statements?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What are compound statements?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What are compound statements?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What are compound statements?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What are compound statements?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What are compound statements?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What are compound statements?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What are compound statements?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What are compound statements?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What are compound statements?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What are compound statements?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What are compound statements?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What are compound statements?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What are compound statements?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What are compound statements?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What are compound statements?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What are compound statements?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What are compound statements?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What are compound statements?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What are compound statements?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What are compound statements?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What are compound statements?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What are compound statements?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What are compound statements?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What are compound statements?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What are compound statements?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What are compound statements?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What are compound statements?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What are compound statements?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What are compound statements?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What are compound statements?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What are compound statements?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What are compound statements?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What are compound statements?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What are compound statements?","ans":"Related Interview Questions..."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":""}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":" "}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans:"}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":" "}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"1"}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"12"}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"123"}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"1234"}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"12345"}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: "}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":" "}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What is the significance of an algorithm to C programming?","ans":"Related Interview Questions..."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":""}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":" "}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans:"}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":" "}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"1"}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"12"}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"123"}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"1234"}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"12345"}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: "}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":" "}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What is the advantage of an array over individual variables?","ans":"Related Interview Questions..."}},{"data":{"ques":" What are linked list?","ans":""}},{"data":{"ques":" What are linked list?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What are linked list?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What are linked list?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What are linked list?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What are linked list?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What are linked list?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What are linked list?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What are linked list?","ans":" "}},{"data":{"ques":" What are linked list?","ans":"Ans:"}},{"data":{"ques":" What are linked list?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What are linked list?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What are linked list?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What are linked list?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What are linked list?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What are linked list?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What are linked list?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What are linked list?","ans":" "}},{"data":{"ques":" What are linked list?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What are linked list?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What are linked list?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What are linked list?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What are linked list?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What are linked list?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What are linked list?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What are linked list?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What are linked list?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What are linked list?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What are linked list?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What are linked list?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What are linked list?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What are linked list?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What are linked list?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What are linked list?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What are linked list?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What are linked list?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What are linked list?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What are linked list?","ans":"1"}},{"data":{"ques":" What are linked list?","ans":"12"}},{"data":{"ques":" What are linked list?","ans":"123"}},{"data":{"ques":" What are linked list?","ans":"1234"}},{"data":{"ques":" What are linked list?","ans":"12345"}},{"data":{"ques":" What are linked list?","ans":"Ans: "}},{"data":{"ques":" What are linked list?","ans":" "}},{"data":{"ques":" What are linked list?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What are linked list?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What are linked list?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What are linked list?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What are linked list?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What are linked list?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What are linked list?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What are linked list?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What are linked list?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What are linked list?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What are linked list?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What are linked list?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What are linked list?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What are linked list?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What are linked list?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What are linked list?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What are linked list?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What are linked list?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What are linked list?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What are linked list?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What are linked list?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What are linked list?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What are linked list?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What are linked list?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What are linked list?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What are linked list?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What are linked list?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What are linked list?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What are linked list?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What are linked list?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What are linked list?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What are linked list?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What are linked list?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What are linked list?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What are linked list?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What are linked list?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What are linked list?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What are linked list?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What are linked list?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What are linked list?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What are linked list?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What are linked list?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What are linked list?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What are linked list?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What are linked list?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What are linked list?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What are linked list?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What are linked list?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What are linked list?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What are linked list?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What are linked list?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What are linked list?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What are linked list?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What are linked list?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What are linked list?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What are linked list?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What are linked list?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What are linked list?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What are linked list?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What are linked list?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What are linked list?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What are linked list?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What are linked list?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What are linked list?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What are linked list?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What are linked list?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What are linked list?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What are linked list?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What are linked list?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What are linked list?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What are linked list?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What are linked list?","ans":"Related Interview Questions..."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":""}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":" "}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans:"}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":" "}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"1"}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"12"}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"123"}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"1234"}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"12345"}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: "}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":" "}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" Write a loop statement that will show the following output:","ans":"Related Interview Questions..."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":""}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":" "}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans:"}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":" "}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"1"}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"12"}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"123"}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"1234"}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"12345"}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: "}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":" "}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What is wrong in this statement?  scanf(“%d”,whatnumber)","ans":"Related Interview Questions..."}},{"data":{"ques":" How do you generate random numbers in C?","ans":""}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" How do you generate random numbers in C?","ans":" "}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans:"}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" How do you generate random numbers in C?","ans":" "}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"1"}},{"data":{"ques":" How do you generate random numbers in C?","ans":"12"}},{"data":{"ques":" How do you generate random numbers in C?","ans":"123"}},{"data":{"ques":" How do you generate random numbers in C?","ans":"1234"}},{"data":{"ques":" How do you generate random numbers in C?","ans":"12345"}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: "}},{"data":{"ques":" How do you generate random numbers in C?","ans":" "}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" How do you generate random numbers in C?","ans":"Related Interview Questions..."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":""}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":" "}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans:"}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":" "}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"1"}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"12"}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"123"}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"1234"}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"12345"}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: "}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":" "}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?","ans":"Related Interview Questions..."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":""}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":" "}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans:"}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":" "}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"1"}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"12"}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"123"}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"1234"}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"12345"}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: "}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":" "}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What are comments and how do you insert it in a C program?","ans":"Related Interview Questions..."}},{"data":{"ques":" What is debugging?","ans":""}},{"data":{"ques":" What is debugging?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What is debugging?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What is debugging?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What is debugging?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What is debugging?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What is debugging?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What is debugging?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What is debugging?","ans":" "}},{"data":{"ques":" What is debugging?","ans":"Ans:"}},{"data":{"ques":" What is debugging?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What is debugging?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What is debugging?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What is debugging?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What is debugging?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What is debugging?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What is debugging?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What is debugging?","ans":" "}},{"data":{"ques":" What is debugging?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What is debugging?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What is debugging?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What is debugging?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What is debugging?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What is debugging?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What is debugging?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What is debugging?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What is debugging?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What is debugging?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What is debugging?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What is debugging?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What is debugging?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What is debugging?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What is debugging?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What is debugging?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What is debugging?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What is debugging?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What is debugging?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What is debugging?","ans":"1"}},{"data":{"ques":" What is debugging?","ans":"12"}},{"data":{"ques":" What is debugging?","ans":"123"}},{"data":{"ques":" What is debugging?","ans":"1234"}},{"data":{"ques":" What is debugging?","ans":"12345"}},{"data":{"ques":" What is debugging?","ans":"Ans: "}},{"data":{"ques":" What is debugging?","ans":" "}},{"data":{"ques":" What is debugging?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What is debugging?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What is debugging?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What is debugging?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What is debugging?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What is debugging?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What is debugging?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What is debugging?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What is debugging?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What is debugging?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What is debugging?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What is debugging?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What is debugging?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What is debugging?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What is debugging?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What is debugging?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What is debugging?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What is debugging?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What is debugging?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What is debugging?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What is debugging?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What is debugging?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What is debugging?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What is debugging?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What is debugging?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What is debugging?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What is debugging?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What is debugging?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What is debugging?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What is debugging?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What is debugging?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What is debugging?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What is debugging?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What is debugging?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What is debugging?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What is debugging?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What is debugging?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What is debugging?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What is debugging?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What is debugging?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What is debugging?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What is debugging?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What is debugging?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What is debugging?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What is debugging?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What is debugging?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What is debugging?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What is debugging?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What is debugging?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What is debugging?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What is debugging?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What is debugging?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What is debugging?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What is debugging?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What is debugging?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What is debugging?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What is debugging?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What is debugging?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What is debugging?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What is debugging?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What is debugging?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What is debugging?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What is debugging?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What is debugging?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What is debugging?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What is debugging?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What is debugging?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What is debugging?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What is debugging?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What is debugging?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What is debugging?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What is debugging?","ans":"Related Interview Questions..."}},{"data":{"ques":" What does the && operator do in a program code?","ans":""}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What does the && operator do in a program code?","ans":" "}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans:"}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What does the && operator do in a program code?","ans":" "}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"1"}},{"data":{"ques":" What does the && operator do in a program code?","ans":"12"}},{"data":{"ques":" What does the && operator do in a program code?","ans":"123"}},{"data":{"ques":" What does the && operator do in a program code?","ans":"1234"}},{"data":{"ques":" What does the && operator do in a program code?","ans":"12345"}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: "}},{"data":{"ques":" What does the && operator do in a program code?","ans":" "}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What does the && operator do in a program code?","ans":"Related Interview Questions..."}},{"data":{"ques":" What is FIFO?","ans":""}},{"data":{"ques":" What is FIFO?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What is FIFO?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What is FIFO?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What is FIFO?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What is FIFO?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What is FIFO?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What is FIFO?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What is FIFO?","ans":" "}},{"data":{"ques":" What is FIFO?","ans":"Ans:"}},{"data":{"ques":" What is FIFO?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What is FIFO?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What is FIFO?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What is FIFO?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What is FIFO?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What is FIFO?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What is FIFO?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What is FIFO?","ans":" "}},{"data":{"ques":" What is FIFO?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What is FIFO?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What is FIFO?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What is FIFO?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What is FIFO?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What is FIFO?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What is FIFO?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What is FIFO?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What is FIFO?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What is FIFO?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What is FIFO?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What is FIFO?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What is FIFO?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What is FIFO?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What is FIFO?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What is FIFO?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What is FIFO?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What is FIFO?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What is FIFO?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What is FIFO?","ans":"1"}},{"data":{"ques":" What is FIFO?","ans":"12"}},{"data":{"ques":" What is FIFO?","ans":"123"}},{"data":{"ques":" What is FIFO?","ans":"1234"}},{"data":{"ques":" What is FIFO?","ans":"12345"}},{"data":{"ques":" What is FIFO?","ans":"Ans: "}},{"data":{"ques":" What is FIFO?","ans":" "}},{"data":{"ques":" What is FIFO?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What is FIFO?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What is FIFO?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What is FIFO?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What is FIFO?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What is FIFO?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What is FIFO?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What is FIFO?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What is FIFO?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What is FIFO?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What is FIFO?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What is FIFO?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What is FIFO?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What is FIFO?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What is FIFO?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What is FIFO?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What is FIFO?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What is FIFO?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What is FIFO?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What is FIFO?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What is FIFO?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What is FIFO?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What is FIFO?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What is FIFO?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What is FIFO?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What is FIFO?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What is FIFO?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What is FIFO?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What is FIFO?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What is FIFO?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What is FIFO?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What is FIFO?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What is FIFO?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What is FIFO?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What is FIFO?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What is FIFO?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What is FIFO?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What is FIFO?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What is FIFO?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What is FIFO?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What is FIFO?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What is FIFO?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What is FIFO?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What is FIFO?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What is FIFO?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What is FIFO?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What is FIFO?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What is FIFO?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What is FIFO?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What is FIFO?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What is FIFO?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What is FIFO?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What is FIFO?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What is FIFO?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What is FIFO?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What is FIFO?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What is FIFO?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What is FIFO?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What is FIFO?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What is FIFO?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What is FIFO?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What is FIFO?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What is FIFO?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What is FIFO?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What is FIFO?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What is FIFO?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What is FIFO?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What is FIFO?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What is FIFO?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What is FIFO?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What is FIFO?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What is FIFO?","ans":"Related Interview Questions..."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":""}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":" "}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans:"}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":" "}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"1"}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"12"}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"123"}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"1234"}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"12345"}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: "}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":" "}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" In C programming, what command or code can be used to determine if a number of odd or even?","ans":"Related Interview Questions..."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":""}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":" "}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans:"}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":" "}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"1"}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"12"}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"123"}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"1234"}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"12345"}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: "}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":" "}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What does the format %10.2 mean when included in a printf statement?","ans":"Related Interview Questions..."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":""}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":" "}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans:"}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":" "}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"1"}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"12"}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"123"}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"1234"}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"12345"}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: "}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":" "}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What are logical errors and how does it differ from syntax errors?","ans":"Related Interview Questions..."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":""}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":" "}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans:"}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":" "}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"1"}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"12"}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"123"}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"1234"}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"12345"}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: "}},{"data":{"ques":" What are the different types of control structures in programming?","ans":" "}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What are the different types of control structures in programming?","ans":"Related Interview Questions..."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":""}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":" "}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans:"}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":" "}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"1"}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"12"}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"123"}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"1234"}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"12345"}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: "}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":" "}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What is || operator and how does it function in a program?","ans":"Related Interview Questions..."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":""}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":" "}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans:"}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":" "}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"1"}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"12"}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"123"}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"1234"}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"12345"}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: "}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":" "}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" Can the “if” function be used in comparing strings?","ans":"Related Interview Questions..."}},{"data":{"ques":" What are preprocessor directives?","ans":""}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What are preprocessor directives?","ans":" "}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans:"}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What are preprocessor directives?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What are preprocessor directives?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What are preprocessor directives?","ans":" "}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What are preprocessor directives?","ans":"1"}},{"data":{"ques":" What are preprocessor directives?","ans":"12"}},{"data":{"ques":" What are preprocessor directives?","ans":"123"}},{"data":{"ques":" What are preprocessor directives?","ans":"1234"}},{"data":{"ques":" What are preprocessor directives?","ans":"12345"}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: "}},{"data":{"ques":" What are preprocessor directives?","ans":" "}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What are preprocessor directives?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What are preprocessor directives?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What are preprocessor directives?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What are preprocessor directives?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What are preprocessor directives?","ans":"Related Interview Questions..."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":""}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":" "}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans:"}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":" "}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"1"}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"12"}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"123"}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"1234"}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"12345"}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: "}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":" "}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Related Interview Questions..."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":""}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":" "}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans:"}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":" "}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"1"}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"12"}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"123"}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"1234"}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"12345"}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: "}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":" "}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" Describe the order of precedence with regards to operators in C.","ans":"Related Interview Questions..."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":""}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":" "}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans:"}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":" "}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"1"}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"12"}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"123"}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"1234"}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"12345"}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: "}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":" "}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What is wrong with this statement? myName = “Robin”;","ans":"Related Interview Questions..."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":""}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":" "}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans:"}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":" "}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"1"}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"12"}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"123"}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"1234"}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"12345"}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: "}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":" "}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" How do you determine the length of a string value that was stored in a variable?","ans":"Related Interview Questions..."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":""}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":" "}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans:"}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":" "}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"1"}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"12"}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"123"}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"1234"}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"12345"}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: "}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":" "}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" Is it possible to initialize a variable at the time it was declared?","ans":"Related Interview Questions..."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":""}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":" "}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans:"}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":" "}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"1"}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"12"}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"123"}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"1234"}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"12345"}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: "}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":" "}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" Why is C language being considered a middle level language?","ans":"Related Interview Questions..."}},{"data":{"ques":" What does the function toupper() do?","ans":""}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What does the function toupper() do?","ans":" "}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans:"}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What does the function toupper() do?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What does the function toupper() do?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What does the function toupper() do?","ans":" "}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What does the function toupper() do?","ans":"1"}},{"data":{"ques":" What does the function toupper() do?","ans":"12"}},{"data":{"ques":" What does the function toupper() do?","ans":"123"}},{"data":{"ques":" What does the function toupper() do?","ans":"1234"}},{"data":{"ques":" What does the function toupper() do?","ans":"12345"}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: "}},{"data":{"ques":" What does the function toupper() do?","ans":" "}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What does the function toupper() do?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What does the function toupper() do?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What does the function toupper() do?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What does the function toupper() do?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What does the function toupper() do?","ans":"Related Interview Questions..."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":""}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":" "}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans:"}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":" "}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"1"}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"12"}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"123"}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"1234"}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"12345"}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: "}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":" "}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" Is it possible to have a function as a parameter in another function?","ans":"Related Interview Questions..."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":""}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":" "}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans:"}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":" "}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"1"}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"12"}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"123"}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"1234"}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"12345"}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: "}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":" "}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" Which function in C can be used to append a string to another string?","ans":"Related Interview Questions..."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":""}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":" "}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans:"}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":" "}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"1"}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"12"}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"123"}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"1234"}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"12345"}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: "}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":" "}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What is the difference between functions getch() and getche()?","ans":"Related Interview Questions..."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":""}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":" "}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans:"}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":" "}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"1"}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"12"}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"123"}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"1234"}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"12345"}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: "}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":" "}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What are the different file extensions involved when programming in C?","ans":"Related Interview Questions..."}},{"data":{"ques":" What are reserved words?","ans":""}},{"data":{"ques":" What are reserved words?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What are reserved words?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What are reserved words?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What are reserved words?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What are reserved words?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What are reserved words?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What are reserved words?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What are reserved words?","ans":" "}},{"data":{"ques":" What are reserved words?","ans":"Ans:"}},{"data":{"ques":" What are reserved words?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What are reserved words?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What are reserved words?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What are reserved words?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What are reserved words?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What are reserved words?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What are reserved words?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What are reserved words?","ans":" "}},{"data":{"ques":" What are reserved words?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What are reserved words?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What are reserved words?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What are reserved words?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What are reserved words?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What are reserved words?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What are reserved words?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What are reserved words?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What are reserved words?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What are reserved words?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What are reserved words?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What are reserved words?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What are reserved words?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What are reserved words?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What are reserved words?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What are reserved words?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What are reserved words?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What are reserved words?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What are reserved words?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What are reserved words?","ans":"1"}},{"data":{"ques":" What are reserved words?","ans":"12"}},{"data":{"ques":" What are reserved words?","ans":"123"}},{"data":{"ques":" What are reserved words?","ans":"1234"}},{"data":{"ques":" What are reserved words?","ans":"12345"}},{"data":{"ques":" What are reserved words?","ans":"Ans: "}},{"data":{"ques":" What are reserved words?","ans":" "}},{"data":{"ques":" What are reserved words?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What are reserved words?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What are reserved words?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What are reserved words?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What are reserved words?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What are reserved words?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What are reserved words?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What are reserved words?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What are reserved words?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What are reserved words?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What are reserved words?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What are reserved words?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What are reserved words?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What are reserved words?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What are reserved words?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What are reserved words?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What are reserved words?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What are reserved words?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What are reserved words?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What are reserved words?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What are reserved words?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What are reserved words?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What are reserved words?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What are reserved words?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What are reserved words?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What are reserved words?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What are reserved words?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What are reserved words?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What are reserved words?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What are reserved words?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What are reserved words?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What are reserved words?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What are reserved words?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What are reserved words?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What are reserved words?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What are reserved words?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What are reserved words?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What are reserved words?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What are reserved words?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What are reserved words?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What are reserved words?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What are reserved words?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What are reserved words?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What are reserved words?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What are reserved words?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What are reserved words?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What are reserved words?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What are reserved words?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What are reserved words?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What are reserved words?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What are reserved words?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What are reserved words?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What are reserved words?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What are reserved words?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What are reserved words?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What are reserved words?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What are reserved words?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What are reserved words?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What are reserved words?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What are reserved words?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What are reserved words?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What are reserved words?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What are reserved words?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What are reserved words?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What are reserved words?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What are reserved words?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What are reserved words?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What are reserved words?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What are reserved words?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What are reserved words?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What are reserved words?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What are reserved words?","ans":"Related Interview Questions..."}},{"data":{"ques":" What is FIFO?","ans":""}},{"data":{"ques":" What is FIFO?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What is FIFO?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What is FIFO?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What is FIFO?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What is FIFO?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What is FIFO?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What is FIFO?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What is FIFO?","ans":" "}},{"data":{"ques":" What is FIFO?","ans":"Ans:"}},{"data":{"ques":" What is FIFO?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What is FIFO?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What is FIFO?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What is FIFO?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What is FIFO?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What is FIFO?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What is FIFO?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What is FIFO?","ans":" "}},{"data":{"ques":" What is FIFO?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What is FIFO?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What is FIFO?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What is FIFO?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What is FIFO?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What is FIFO?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What is FIFO?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What is FIFO?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What is FIFO?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What is FIFO?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What is FIFO?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What is FIFO?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What is FIFO?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What is FIFO?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What is FIFO?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What is FIFO?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What is FIFO?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What is FIFO?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What is FIFO?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What is FIFO?","ans":"1"}},{"data":{"ques":" What is FIFO?","ans":"12"}},{"data":{"ques":" What is FIFO?","ans":"123"}},{"data":{"ques":" What is FIFO?","ans":"1234"}},{"data":{"ques":" What is FIFO?","ans":"12345"}},{"data":{"ques":" What is FIFO?","ans":"Ans: "}},{"data":{"ques":" What is FIFO?","ans":" "}},{"data":{"ques":" What is FIFO?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What is FIFO?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What is FIFO?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What is FIFO?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What is FIFO?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What is FIFO?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What is FIFO?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What is FIFO?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What is FIFO?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What is FIFO?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What is FIFO?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What is FIFO?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What is FIFO?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What is FIFO?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What is FIFO?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What is FIFO?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What is FIFO?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What is FIFO?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What is FIFO?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What is FIFO?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What is FIFO?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What is FIFO?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What is FIFO?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What is FIFO?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What is FIFO?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What is FIFO?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What is FIFO?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What is FIFO?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What is FIFO?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What is FIFO?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What is FIFO?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What is FIFO?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What is FIFO?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What is FIFO?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What is FIFO?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What is FIFO?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What is FIFO?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What is FIFO?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What is FIFO?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What is FIFO?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What is FIFO?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What is FIFO?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What is FIFO?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What is FIFO?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What is FIFO?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What is FIFO?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What is FIFO?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What is FIFO?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What is FIFO?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What is FIFO?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What is FIFO?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What is FIFO?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What is FIFO?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What is FIFO?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What is FIFO?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What is FIFO?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What is FIFO?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What is FIFO?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What is FIFO?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What is FIFO?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What is FIFO?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What is FIFO?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What is FIFO?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What is FIFO?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What is FIFO?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What is FIFO?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What is FIFO?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What is FIFO?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What is FIFO?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What is FIFO?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What is FIFO?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What is FIFO?","ans":"Related Interview Questions..."}},{"data":{"ques":" What are binary trees?","ans":""}},{"data":{"ques":" What are binary trees?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What are binary trees?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What are binary trees?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What are binary trees?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What are binary trees?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What are binary trees?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What are binary trees?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What are binary trees?","ans":" "}},{"data":{"ques":" What are binary trees?","ans":"Ans:"}},{"data":{"ques":" What are binary trees?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What are binary trees?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What are binary trees?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What are binary trees?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What are binary trees?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What are binary trees?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What are binary trees?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What are binary trees?","ans":" "}},{"data":{"ques":" What are binary trees?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What are binary trees?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What are binary trees?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What are binary trees?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What are binary trees?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What are binary trees?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What are binary trees?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What are binary trees?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What are binary trees?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What are binary trees?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What are binary trees?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What are binary trees?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What are binary trees?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What are binary trees?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What are binary trees?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What are binary trees?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What are binary trees?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What are binary trees?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What are binary trees?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What are binary trees?","ans":"1"}},{"data":{"ques":" What are binary trees?","ans":"12"}},{"data":{"ques":" What are binary trees?","ans":"123"}},{"data":{"ques":" What are binary trees?","ans":"1234"}},{"data":{"ques":" What are binary trees?","ans":"12345"}},{"data":{"ques":" What are binary trees?","ans":"Ans: "}},{"data":{"ques":" What are binary trees?","ans":" "}},{"data":{"ques":" What are binary trees?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What are binary trees?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What are binary trees?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What are binary trees?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What are binary trees?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What are binary trees?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What are binary trees?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What are binary trees?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What are binary trees?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What are binary trees?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What are binary trees?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What are binary trees?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What are binary trees?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What are binary trees?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What are binary trees?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What are binary trees?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What are binary trees?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What are binary trees?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What are binary trees?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What are binary trees?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What are binary trees?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What are binary trees?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What are binary trees?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What are binary trees?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What are binary trees?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What are binary trees?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What are binary trees?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What are binary trees?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What are binary trees?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What are binary trees?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What are binary trees?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What are binary trees?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What are binary trees?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What are binary trees?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What are binary trees?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What are binary trees?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What are binary trees?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What are binary trees?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What are binary trees?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What are binary trees?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What are binary trees?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What are binary trees?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What are binary trees?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What are binary trees?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What are binary trees?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What are binary trees?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What are binary trees?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What are binary trees?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What are binary trees?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What are binary trees?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What are binary trees?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What are binary trees?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What are binary trees?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What are binary trees?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What are binary trees?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What are binary trees?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What are binary trees?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What are binary trees?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What are binary trees?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What are binary trees?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What are binary trees?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What are binary trees?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What are binary trees?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What are binary trees?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What are binary trees?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What are binary trees?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What are binary trees?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What are binary trees?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What are binary trees?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What are binary trees?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What are binary trees?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What are binary trees?","ans":"Related Interview Questions..."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":""}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":" "}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans:"}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":" "}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"1"}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"12"}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"123"}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"1234"}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"12345"}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: "}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":" "}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" Not all reserved words are written in lowercase. TRUE or FALSE?","ans":"Related Interview Questions..."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":""}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":" "}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans:"}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":" "}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"1"}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"12"}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"123"}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"1234"}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"12345"}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: "}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":" "}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What is the difference between the expression “++a”  and “a++”?","ans":"Related Interview Questions..."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":""}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":" "}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans:"}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":" "}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"1"}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"12"}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"123"}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"1234"}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"12345"}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: "}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":" "}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What would happen to X in this expression: X += 15;  (assuming the value of X is 5)?","ans":"Related Interview Questions..."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":""}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":" "}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans:"}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":" "}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"1"}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"12"}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"123"}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"1234"}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"12345"}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: "}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":" "}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?","ans":"Related Interview Questions..."}},{"data":{"ques":" What is an endless loop?","ans":""}},{"data":{"ques":" What is an endless loop?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What is an endless loop?","ans":" "}},{"data":{"ques":" What is an endless loop?","ans":"Ans:"}},{"data":{"ques":" What is an endless loop?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What is an endless loop?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What is an endless loop?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What is an endless loop?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What is an endless loop?","ans":" "}},{"data":{"ques":" What is an endless loop?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What is an endless loop?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What is an endless loop?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What is an endless loop?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What is an endless loop?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What is an endless loop?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What is an endless loop?","ans":"1"}},{"data":{"ques":" What is an endless loop?","ans":"12"}},{"data":{"ques":" What is an endless loop?","ans":"123"}},{"data":{"ques":" What is an endless loop?","ans":"1234"}},{"data":{"ques":" What is an endless loop?","ans":"12345"}},{"data":{"ques":" What is an endless loop?","ans":"Ans: "}},{"data":{"ques":" What is an endless loop?","ans":" "}},{"data":{"ques":" What is an endless loop?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What is an endless loop?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What is an endless loop?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What is an endless loop?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What is an endless loop?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What is an endless loop?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What is an endless loop?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What is an endless loop?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What is an endless loop?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What is an endless loop?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What is an endless loop?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What is an endless loop?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What is an endless loop?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What is an endless loop?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What is an endless loop?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What is an endless loop?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What is an endless loop?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What is an endless loop?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What is an endless loop?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What is an endless loop?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What is an endless loop?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What is an endless loop?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What is an endless loop?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What is an endless loop?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What is an endless loop?","ans":"Related Interview Questions..."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":""}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":" "}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans:"}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":" "}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"1"}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"12"}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"123"}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"1234"}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"12345"}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: "}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":" "}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What is a program flowchart and how does it help in writing a program?","ans":"Related Interview Questions..."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":""}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":" "}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans:"}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":" "}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"1"}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"12"}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"123"}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"1234"}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"12345"}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: "}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":" "}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What is wrong with this program statement? void = 10;","ans":"Related Interview Questions..."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":""}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":" "}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans:"}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":" "}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"1"}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"12"}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"123"}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"1234"}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"12345"}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: "}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":" "}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" Is this program statement valid? INT = 10.50;","ans":"Related Interview Questions..."}},{"data":{"ques":" What are actual arguments?","ans":""}},{"data":{"ques":" What are actual arguments?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What are actual arguments?","ans":" "}},{"data":{"ques":" What are actual arguments?","ans":"Ans:"}},{"data":{"ques":" What are actual arguments?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What are actual arguments?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What are actual arguments?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What are actual arguments?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What are actual arguments?","ans":" "}},{"data":{"ques":" What are actual arguments?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What are actual arguments?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What are actual arguments?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What are actual arguments?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What are actual arguments?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What are actual arguments?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What are actual arguments?","ans":"1"}},{"data":{"ques":" What are actual arguments?","ans":"12"}},{"data":{"ques":" What are actual arguments?","ans":"123"}},{"data":{"ques":" What are actual arguments?","ans":"1234"}},{"data":{"ques":" What are actual arguments?","ans":"12345"}},{"data":{"ques":" What are actual arguments?","ans":"Ans: "}},{"data":{"ques":" What are actual arguments?","ans":" "}},{"data":{"ques":" What are actual arguments?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What are actual arguments?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What are actual arguments?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What are actual arguments?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What are actual arguments?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What are actual arguments?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What are actual arguments?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What are actual arguments?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What are actual arguments?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What are actual arguments?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What are actual arguments?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What are actual arguments?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What are actual arguments?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What are actual arguments?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What are actual arguments?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What are actual arguments?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What are actual arguments?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What are actual arguments?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What are actual arguments?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What are actual arguments?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What are actual arguments?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What are actual arguments?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What are actual arguments?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What are actual arguments?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What are actual arguments?","ans":"Related Interview Questions..."}},{"data":{"ques":" What is a newline escape sequence?","ans":""}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What is a newline escape sequence?","ans":" "}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans:"}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What is a newline escape sequence?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What is a newline escape sequence?","ans":" "}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What is a newline escape sequence?","ans":"1"}},{"data":{"ques":" What is a newline escape sequence?","ans":"12"}},{"data":{"ques":" What is a newline escape sequence?","ans":"123"}},{"data":{"ques":" What is a newline escape sequence?","ans":"1234"}},{"data":{"ques":" What is a newline escape sequence?","ans":"12345"}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: "}},{"data":{"ques":" What is a newline escape sequence?","ans":" "}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What is a newline escape sequence?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What is a newline escape sequence?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What is a newline escape sequence?","ans":"Related Interview Questions..."}},{"data":{"ques":" What is output redirection?","ans":""}},{"data":{"ques":" What is output redirection?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What is output redirection?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What is output redirection?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What is output redirection?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What is output redirection?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What is output redirection?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What is output redirection?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What is output redirection?","ans":" "}},{"data":{"ques":" What is output redirection?","ans":"Ans:"}},{"data":{"ques":" What is output redirection?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What is output redirection?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What is output redirection?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What is output redirection?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What is output redirection?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What is output redirection?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What is output redirection?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What is output redirection?","ans":" "}},{"data":{"ques":" What is output redirection?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What is output redirection?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What is output redirection?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What is output redirection?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What is output redirection?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What is output redirection?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What is output redirection?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What is output redirection?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What is output redirection?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What is output redirection?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What is output redirection?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What is output redirection?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What is output redirection?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What is output redirection?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What is output redirection?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What is output redirection?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What is output redirection?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What is output redirection?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What is output redirection?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What is output redirection?","ans":"1"}},{"data":{"ques":" What is output redirection?","ans":"12"}},{"data":{"ques":" What is output redirection?","ans":"123"}},{"data":{"ques":" What is output redirection?","ans":"1234"}},{"data":{"ques":" What is output redirection?","ans":"12345"}},{"data":{"ques":" What is output redirection?","ans":"Ans: "}},{"data":{"ques":" What is output redirection?","ans":" "}},{"data":{"ques":" What is output redirection?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What is output redirection?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What is output redirection?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What is output redirection?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What is output redirection?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What is output redirection?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What is output redirection?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What is output redirection?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What is output redirection?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What is output redirection?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What is output redirection?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What is output redirection?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What is output redirection?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What is output redirection?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What is output redirection?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What is output redirection?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What is output redirection?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What is output redirection?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What is output redirection?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What is output redirection?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What is output redirection?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What is output redirection?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What is output redirection?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What is output redirection?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What is output redirection?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What is output redirection?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What is output redirection?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What is output redirection?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What is output redirection?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What is output redirection?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What is output redirection?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What is output redirection?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What is output redirection?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What is output redirection?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What is output redirection?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What is output redirection?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What is output redirection?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What is output redirection?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What is output redirection?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What is output redirection?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What is output redirection?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What is output redirection?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What is output redirection?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What is output redirection?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What is output redirection?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What is output redirection?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What is output redirection?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What is output redirection?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What is output redirection?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What is output redirection?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What is output redirection?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What is output redirection?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What is output redirection?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What is output redirection?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What is output redirection?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What is output redirection?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What is output redirection?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What is output redirection?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What is output redirection?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What is output redirection?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What is output redirection?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What is output redirection?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What is output redirection?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What is output redirection?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What is output redirection?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What is output redirection?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What is output redirection?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What is output redirection?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What is output redirection?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What is output redirection?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What is output redirection?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What is output redirection?","ans":"Related Interview Questions..."}},{"data":{"ques":" What are run-time errors?","ans":""}},{"data":{"ques":" What are run-time errors?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What are run-time errors?","ans":" "}},{"data":{"ques":" What are run-time errors?","ans":"Ans:"}},{"data":{"ques":" What are run-time errors?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What are run-time errors?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What are run-time errors?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What are run-time errors?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What are run-time errors?","ans":" "}},{"data":{"ques":" What are run-time errors?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What are run-time errors?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What are run-time errors?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What are run-time errors?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What are run-time errors?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What are run-time errors?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What are run-time errors?","ans":"1"}},{"data":{"ques":" What are run-time errors?","ans":"12"}},{"data":{"ques":" What are run-time errors?","ans":"123"}},{"data":{"ques":" What are run-time errors?","ans":"1234"}},{"data":{"ques":" What are run-time errors?","ans":"12345"}},{"data":{"ques":" What are run-time errors?","ans":"Ans: "}},{"data":{"ques":" What are run-time errors?","ans":" "}},{"data":{"ques":" What are run-time errors?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What are run-time errors?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What are run-time errors?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What are run-time errors?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What are run-time errors?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What are run-time errors?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What are run-time errors?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What are run-time errors?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What are run-time errors?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What are run-time errors?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What are run-time errors?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What are run-time errors?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What are run-time errors?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What are run-time errors?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What are run-time errors?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What are run-time errors?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What are run-time errors?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What are run-time errors?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What are run-time errors?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What are run-time errors?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What are run-time errors?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What are run-time errors?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What are run-time errors?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What are run-time errors?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What are run-time errors?","ans":"Related Interview Questions..."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":""}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":" "}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans:"}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":" "}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"1"}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"12"}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"123"}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"1234"}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"12345"}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: "}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":" "}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What is the difference between functions abs() and fabs()?","ans":"Related Interview Questions..."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":""}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":" "}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans:"}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":" "}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"1"}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"12"}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"123"}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"1234"}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"12345"}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: "}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":" "}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What will be the outcome of the following conditional statement if the value of variable s is 10?","ans":"Related Interview Questions..."}},{"data":{"ques":" What are formal parameters?","ans":""}},{"data":{"ques":" What are formal parameters?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What are formal parameters?","ans":" "}},{"data":{"ques":" What are formal parameters?","ans":"Ans:"}},{"data":{"ques":" What are formal parameters?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What are formal parameters?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What are formal parameters?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What are formal parameters?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What are formal parameters?","ans":" "}},{"data":{"ques":" What are formal parameters?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What are formal parameters?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What are formal parameters?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What are formal parameters?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What are formal parameters?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What are formal parameters?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What are formal parameters?","ans":"1"}},{"data":{"ques":" What are formal parameters?","ans":"12"}},{"data":{"ques":" What are formal parameters?","ans":"123"}},{"data":{"ques":" What are formal parameters?","ans":"1234"}},{"data":{"ques":" What are formal parameters?","ans":"12345"}},{"data":{"ques":" What are formal parameters?","ans":"Ans: "}},{"data":{"ques":" What are formal parameters?","ans":" "}},{"data":{"ques":" What are formal parameters?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What are formal parameters?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What are formal parameters?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What are formal parameters?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What are formal parameters?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What are formal parameters?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What are formal parameters?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What are formal parameters?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What are formal parameters?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What are formal parameters?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What are formal parameters?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What are formal parameters?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What are formal parameters?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What are formal parameters?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What are formal parameters?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What are formal parameters?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What are formal parameters?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What are formal parameters?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What are formal parameters?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What are formal parameters?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What are formal parameters?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What are formal parameters?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What are formal parameters?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What are formal parameters?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What are formal parameters?","ans":"Related Interview Questions..."}},{"data":{"ques":" What are control structures?","ans":""}},{"data":{"ques":" What are control structures?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What are control structures?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What are control structures?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What are control structures?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What are control structures?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What are control structures?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What are control structures?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What are control structures?","ans":" "}},{"data":{"ques":" What are control structures?","ans":"Ans:"}},{"data":{"ques":" What are control structures?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What are control structures?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What are control structures?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What are control structures?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What are control structures?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What are control structures?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What are control structures?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What are control structures?","ans":" "}},{"data":{"ques":" What are control structures?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What are control structures?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What are control structures?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What are control structures?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What are control structures?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What are control structures?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What are control structures?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What are control structures?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What are control structures?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What are control structures?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What are control structures?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What are control structures?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What are control structures?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What are control structures?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What are control structures?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What are control structures?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What are control structures?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What are control structures?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What are control structures?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What are control structures?","ans":"1"}},{"data":{"ques":" What are control structures?","ans":"12"}},{"data":{"ques":" What are control structures?","ans":"123"}},{"data":{"ques":" What are control structures?","ans":"1234"}},{"data":{"ques":" What are control structures?","ans":"12345"}},{"data":{"ques":" What are control structures?","ans":"Ans: "}},{"data":{"ques":" What are control structures?","ans":" "}},{"data":{"ques":" What are control structures?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What are control structures?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What are control structures?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What are control structures?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What are control structures?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What are control structures?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What are control structures?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What are control structures?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What are control structures?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What are control structures?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What are control structures?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What are control structures?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What are control structures?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What are control structures?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What are control structures?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What are control structures?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What are control structures?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What are control structures?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What are control structures?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What are control structures?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What are control structures?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What are control structures?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What are control structures?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What are control structures?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What are control structures?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What are control structures?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What are control structures?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What are control structures?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What are control structures?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What are control structures?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What are control structures?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What are control structures?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What are control structures?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What are control structures?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What are control structures?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What are control structures?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What are control structures?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What are control structures?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What are control structures?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What are control structures?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What are control structures?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What are control structures?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What are control structures?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What are control structures?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What are control structures?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What are control structures?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What are control structures?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What are control structures?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What are control structures?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What are control structures?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What are control structures?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What are control structures?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What are control structures?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What are control structures?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What are control structures?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What are control structures?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What are control structures?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What are control structures?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What are control structures?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What are control structures?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What are control structures?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What are control structures?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What are control structures?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What are control structures?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What are control structures?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What are control structures?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What are control structures?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What are control structures?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What are control structures?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What are control structures?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What are control structures?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What are control structures?","ans":"Related Interview Questions..."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":""}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":" "}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans:"}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":" "}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"1"}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"12"}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"123"}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"1234"}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"12345"}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: "}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":" "}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" Write a simple code fragment that will check if a number is positive or negative.","ans":"Related Interview Questions..."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":""}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":" "}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans:"}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":" "}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"1"}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"12"}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"123"}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"1234"}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"12345"}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: "}},{"data":{"ques":" What are global variables and how do you declare them?","ans":" "}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What are global variables and how do you declare them?","ans":"Related Interview Questions..."}},{"data":{"ques":" What are enumerated types?","ans":""}},{"data":{"ques":" What are enumerated types?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What are enumerated types?","ans":" "}},{"data":{"ques":" What are enumerated types?","ans":"Ans:"}},{"data":{"ques":" What are enumerated types?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What are enumerated types?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What are enumerated types?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What are enumerated types?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What are enumerated types?","ans":" "}},{"data":{"ques":" What are enumerated types?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What are enumerated types?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What are enumerated types?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What are enumerated types?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What are enumerated types?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What are enumerated types?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What are enumerated types?","ans":"1"}},{"data":{"ques":" What are enumerated types?","ans":"12"}},{"data":{"ques":" What are enumerated types?","ans":"123"}},{"data":{"ques":" What are enumerated types?","ans":"1234"}},{"data":{"ques":" What are enumerated types?","ans":"12345"}},{"data":{"ques":" What are enumerated types?","ans":"Ans: "}},{"data":{"ques":" What are enumerated types?","ans":" "}},{"data":{"ques":" What are enumerated types?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What are enumerated types?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What are enumerated types?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What are enumerated types?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What are enumerated types?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What are enumerated types?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What are enumerated types?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What are enumerated types?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What are enumerated types?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What are enumerated types?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What are enumerated types?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What are enumerated types?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What are enumerated types?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What are enumerated types?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What are enumerated types?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What are enumerated types?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What are enumerated types?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What are enumerated types?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What are enumerated types?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What are enumerated types?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What are enumerated types?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What are enumerated types?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What are enumerated types?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What are enumerated types?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What are enumerated types?","ans":"Related Interview Questions..."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":""}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":" "}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans:"}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":" "}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"1"}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"12"}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"123"}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"1234"}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"12345"}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: "}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":" "}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" Dothese two program statements perform the same output? 1) scanf(“%c”, &letter);  2) letter=getchar()","ans":"Related Interview Questions..."}},{"data":{"ques":" What are structure types in C?","ans":""}},{"data":{"ques":" What are structure types in C?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What are structure types in C?","ans":" "}},{"data":{"ques":" What are structure types in C?","ans":"Ans:"}},{"data":{"ques":" What are structure types in C?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What are structure types in C?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What are structure types in C?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What are structure types in C?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What are structure types in C?","ans":" "}},{"data":{"ques":" What are structure types in C?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What are structure types in C?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What are structure types in C?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What are structure types in C?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What are structure types in C?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What are structure types in C?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What are structure types in C?","ans":"1"}},{"data":{"ques":" What are structure types in C?","ans":"12"}},{"data":{"ques":" What are structure types in C?","ans":"123"}},{"data":{"ques":" What are structure types in C?","ans":"1234"}},{"data":{"ques":" What are structure types in C?","ans":"12345"}},{"data":{"ques":" What are structure types in C?","ans":"Ans: "}},{"data":{"ques":" What are structure types in C?","ans":" "}},{"data":{"ques":" What are structure types in C?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What are structure types in C?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What are structure types in C?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What are structure types in C?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What are structure types in C?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What are structure types in C?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What are structure types in C?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What are structure types in C?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What are structure types in C?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What are structure types in C?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What are structure types in C?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What are structure types in C?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What are structure types in C?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What are structure types in C?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What are structure types in C?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What are structure types in C?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What are structure types in C?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What are structure types in C?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What are structure types in C?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What are structure types in C?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What are structure types in C?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What are structure types in C?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What are structure types in C?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What are structure types in C?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What are structure types in C?","ans":"Related Interview Questions..."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":""}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":" "}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans:"}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":" "}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"1"}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"12"}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"123"}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"1234"}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"12345"}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: "}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":" "}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What does the characters “r” and “w” mean when writing programs that will make use of files?","ans":"Related Interview Questions..."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":""}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":" "}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans:"}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":" "}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"1"}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"12"}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"123"}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"1234"}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"12345"}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: "}},{"data":{"ques":" What is the difference between text files and binary files?","ans":" "}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What is the difference between text files and binary files?","ans":"Related Interview Questions..."}},{"data":{"ques":" Is it possible to create your own header files?","ans":""}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" Is it possible to create your own header files?","ans":" "}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans:"}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" Is it possible to create your own header files?","ans":" "}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"1"}},{"data":{"ques":" Is it possible to create your own header files?","ans":"12"}},{"data":{"ques":" Is it possible to create your own header files?","ans":"123"}},{"data":{"ques":" Is it possible to create your own header files?","ans":"1234"}},{"data":{"ques":" Is it possible to create your own header files?","ans":"12345"}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: "}},{"data":{"ques":" Is it possible to create your own header files?","ans":" "}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" Is it possible to create your own header files?","ans":"Related Interview Questions..."}},{"data":{"ques":" What is dynamic data structure?","ans":""}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What is dynamic data structure?","ans":" "}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans:"}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What is dynamic data structure?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What is dynamic data structure?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What is dynamic data structure?","ans":" "}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What is dynamic data structure?","ans":"1"}},{"data":{"ques":" What is dynamic data structure?","ans":"12"}},{"data":{"ques":" What is dynamic data structure?","ans":"123"}},{"data":{"ques":" What is dynamic data structure?","ans":"1234"}},{"data":{"ques":" What is dynamic data structure?","ans":"12345"}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: "}},{"data":{"ques":" What is dynamic data structure?","ans":" "}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What is dynamic data structure?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What is dynamic data structure?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What is dynamic data structure?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What is dynamic data structure?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What is dynamic data structure?","ans":"Related Interview Questions..."}},{"data":{"ques":" What are the different data types in C?","ans":""}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What are the different data types in C?","ans":" "}},{"data":{"ques":" What are the different data types in C?","ans":"Ans:"}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What are the different data types in C?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What are the different data types in C?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What are the different data types in C?","ans":" "}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What are the different data types in C?","ans":"1"}},{"data":{"ques":" What are the different data types in C?","ans":"12"}},{"data":{"ques":" What are the different data types in C?","ans":"123"}},{"data":{"ques":" What are the different data types in C?","ans":"1234"}},{"data":{"ques":" What are the different data types in C?","ans":"12345"}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: "}},{"data":{"ques":" What are the different data types in C?","ans":" "}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What are the different data types in C?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What are the different data types in C?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What are the different data types in C?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What are the different data types in C?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What are the different data types in C?","ans":"Related Interview Questions..."}},{"data":{"ques":" What is the general form of a C program?","ans":""}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What is the general form of a C program?","ans":" "}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans:"}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What is the general form of a C program?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What is the general form of a C program?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What is the general form of a C program?","ans":" "}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What is the general form of a C program?","ans":"1"}},{"data":{"ques":" What is the general form of a C program?","ans":"12"}},{"data":{"ques":" What is the general form of a C program?","ans":"123"}},{"data":{"ques":" What is the general form of a C program?","ans":"1234"}},{"data":{"ques":" What is the general form of a C program?","ans":"12345"}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: "}},{"data":{"ques":" What is the general form of a C program?","ans":" "}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What is the general form of a C program?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What is the general form of a C program?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What is the general form of a C program?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What is the general form of a C program?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What is the general form of a C program?","ans":"Related Interview Questions..."}},{"data":{"ques":" What is the advantage of a random access file?","ans":""}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What is the advantage of a random access file?","ans":" "}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans:"}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What is the advantage of a random access file?","ans":" "}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"1"}},{"data":{"ques":" What is the advantage of a random access file?","ans":"12"}},{"data":{"ques":" What is the advantage of a random access file?","ans":"123"}},{"data":{"ques":" What is the advantage of a random access file?","ans":"1234"}},{"data":{"ques":" What is the advantage of a random access file?","ans":"12345"}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: "}},{"data":{"ques":" What is the advantage of a random access file?","ans":" "}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What is the advantage of a random access file?","ans":"Related Interview Questions..."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":""}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":" "}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans:"}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":" "}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"1"}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"12"}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"123"}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"1234"}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"12345"}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: "}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":" "}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" In a switch statement, what will happen if a break statement is omitted?","ans":"Related Interview Questions..."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":""}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":" "}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans:"}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":" "}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"1"}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"12"}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"123"}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"1234"}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"12345"}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: "}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":" "}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" Describe how arrays can be passed to a user defined function","ans":"Related Interview Questions..."}},{"data":{"ques":" What are pointers?","ans":""}},{"data":{"ques":" What are pointers?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What are pointers?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What are pointers?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What are pointers?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What are pointers?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What are pointers?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What are pointers?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What are pointers?","ans":" "}},{"data":{"ques":" What are pointers?","ans":"Ans:"}},{"data":{"ques":" What are pointers?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What are pointers?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What are pointers?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What are pointers?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What are pointers?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What are pointers?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What are pointers?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What are pointers?","ans":" "}},{"data":{"ques":" What are pointers?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What are pointers?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What are pointers?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What are pointers?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What are pointers?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What are pointers?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What are pointers?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What are pointers?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What are pointers?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What are pointers?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What are pointers?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What are pointers?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What are pointers?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What are pointers?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What are pointers?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What are pointers?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What are pointers?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What are pointers?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What are pointers?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What are pointers?","ans":"1"}},{"data":{"ques":" What are pointers?","ans":"12"}},{"data":{"ques":" What are pointers?","ans":"123"}},{"data":{"ques":" What are pointers?","ans":"1234"}},{"data":{"ques":" What are pointers?","ans":"12345"}},{"data":{"ques":" What are pointers?","ans":"Ans: "}},{"data":{"ques":" What are pointers?","ans":" "}},{"data":{"ques":" What are pointers?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What are pointers?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What are pointers?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What are pointers?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What are pointers?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What are pointers?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What are pointers?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What are pointers?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What are pointers?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What are pointers?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What are pointers?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What are pointers?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What are pointers?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What are pointers?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What are pointers?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What are pointers?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What are pointers?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What are pointers?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What are pointers?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What are pointers?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What are pointers?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What are pointers?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What are pointers?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What are pointers?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What are pointers?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What are pointers?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What are pointers?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What are pointers?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What are pointers?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What are pointers?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What are pointers?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What are pointers?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What are pointers?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What are pointers?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What are pointers?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What are pointers?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What are pointers?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What are pointers?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What are pointers?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What are pointers?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What are pointers?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What are pointers?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What are pointers?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What are pointers?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What are pointers?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What are pointers?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What are pointers?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What are pointers?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What are pointers?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What are pointers?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What are pointers?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What are pointers?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What are pointers?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What are pointers?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What are pointers?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What are pointers?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What are pointers?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What are pointers?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What are pointers?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What are pointers?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What are pointers?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What are pointers?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What are pointers?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What are pointers?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What are pointers?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What are pointers?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What are pointers?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What are pointers?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What are pointers?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What are pointers?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What are pointers?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What are pointers?","ans":"Related Interview Questions..."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":""}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":" "}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans:"}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":" "}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"1"}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"12"}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"123"}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"1234"}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"12345"}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: "}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":" "}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" Can you pass an entire structure to functions?","ans":"Related Interview Questions..."}},{"data":{"ques":" What is gets() function?","ans":""}},{"data":{"ques":" What is gets() function?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What is gets() function?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What is gets() function?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What is gets() function?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What is gets() function?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What is gets() function?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What is gets() function?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What is gets() function?","ans":" "}},{"data":{"ques":" What is gets() function?","ans":"Ans:"}},{"data":{"ques":" What is gets() function?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What is gets() function?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What is gets() function?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What is gets() function?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What is gets() function?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What is gets() function?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What is gets() function?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What is gets() function?","ans":" "}},{"data":{"ques":" What is gets() function?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What is gets() function?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What is gets() function?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What is gets() function?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What is gets() function?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What is gets() function?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What is gets() function?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What is gets() function?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What is gets() function?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What is gets() function?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What is gets() function?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What is gets() function?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What is gets() function?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What is gets() function?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What is gets() function?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What is gets() function?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What is gets() function?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What is gets() function?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What is gets() function?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What is gets() function?","ans":"1"}},{"data":{"ques":" What is gets() function?","ans":"12"}},{"data":{"ques":" What is gets() function?","ans":"123"}},{"data":{"ques":" What is gets() function?","ans":"1234"}},{"data":{"ques":" What is gets() function?","ans":"12345"}},{"data":{"ques":" What is gets() function?","ans":"Ans: "}},{"data":{"ques":" What is gets() function?","ans":" "}},{"data":{"ques":" What is gets() function?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What is gets() function?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What is gets() function?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What is gets() function?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What is gets() function?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What is gets() function?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What is gets() function?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What is gets() function?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What is gets() function?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What is gets() function?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What is gets() function?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What is gets() function?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What is gets() function?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What is gets() function?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What is gets() function?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What is gets() function?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What is gets() function?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What is gets() function?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What is gets() function?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What is gets() function?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What is gets() function?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What is gets() function?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What is gets() function?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What is gets() function?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What is gets() function?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What is gets() function?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What is gets() function?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What is gets() function?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What is gets() function?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What is gets() function?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What is gets() function?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What is gets() function?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What is gets() function?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What is gets() function?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What is gets() function?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What is gets() function?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What is gets() function?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What is gets() function?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What is gets() function?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What is gets() function?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What is gets() function?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What is gets() function?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What is gets() function?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What is gets() function?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What is gets() function?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What is gets() function?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What is gets() function?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What is gets() function?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What is gets() function?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What is gets() function?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What is gets() function?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What is gets() function?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What is gets() function?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What is gets() function?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What is gets() function?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What is gets() function?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What is gets() function?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What is gets() function?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What is gets() function?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What is gets() function?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What is gets() function?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What is gets() function?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What is gets() function?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What is gets() function?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What is gets() function?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What is gets() function?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What is gets() function?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What is gets() function?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What is gets() function?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What is gets() function?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What is gets() function?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What is gets() function?","ans":"Related Interview Questions..."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":""}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":" "}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans:"}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":" "}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"1"}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"12"}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"123"}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"1234"}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"12345"}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: "}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":" "}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?","ans":"Related Interview Questions..."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":""}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":" "}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans:"}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":" "}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"1"}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"12"}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"123"}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"1234"}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"12345"}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: "}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":" "}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" How do you search data in a data file using random access method?","ans":"Related Interview Questions..."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":""}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":" "}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans:"}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":" "}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"1"}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"12"}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"123"}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"1234"}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"12345"}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: "}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":" "}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" Are comments included during the compilation stage and placed in the EXE file as well?","ans":"Related Interview Questions..."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":""}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":" "}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans:"}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":" "}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"1"}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"12"}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"123"}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"1234"}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"12345"}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: "}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":" "}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" Is there a built-in function in C that can be used for sorting data?","ans":"Related Interview Questions..."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":""}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":" "}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans:"}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":" "}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"1"}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"12"}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"123"}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"1234"}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"12345"}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: "}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":" "}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What are the advantages and disadvantages of a heap?","ans":"Related Interview Questions..."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":""}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":" "}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans:"}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":" "}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"1"}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"12"}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"123"}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"1234"}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"12345"}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: "}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":" "}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" How do you convert strings to numbers in C?","ans":"Related Interview Questions..."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":""}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":" "}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans:"}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":" "}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"1"}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"12"}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"123"}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"1234"}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"12345"}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: "}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":" "}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" Create a simple code fragment that will swap the values of two variables num1 and num2.","ans":"Related Interview Questions..."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":""}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: C is a mid level and procedural programming language."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: Spaghetti programming refers to codes that tend to get tangled and overlapped throughout the program. This unstructured approach to coding is usually attributed to lack of experience on the part of the programmer. Spaghetti programing makes a program complex and analyzing the codes difficult, and so must be avoided as much as possible."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement “x++” means to increment the value of x by 1. Likewise, the statement “x –” means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of “x++”, another way to write it is “x = x +1”."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":" "}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans:"}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Differentiate Source Codes from Object Codes:"}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers \\’ (for single quote), and \\” (for double quote)."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: It is referred to as a terminating null character, and is used primarily to show the end of a string value."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":" "}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: <> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello\\n\\n\\’World\\'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"1"}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"12"}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"123"}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"1234"}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"12345"}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: "}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":" "}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: There is no single command or function in C that can check if a number is odd or even. However, this can be accomplished by dividing that number by 2, then checking the remainder. If the remainder is 0, then that number is even, otherwise, it is odd. You can write it in code as:"}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, “Robin”);"}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Q56. What are multidimensional arrays?"}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example; you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: A newline escape sequence is represented by the \\n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \\n characters. For example, \\n\\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"s >=10 && s < 25 && s!=12"}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: The outcome will be TRUE. Since the value of s is 10, s >= 10 evaluates to TRUE because s is not greater than 10 but is still equal to 10. s< 25 is also TRUE since 10 is less then 25. Just the same, s!=12, which means s is not equal to 12, evaluates to TRUE. The && is the AND operator, and follows the rule that if all individual conditions are TRUE, the entire statement is TRUE."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: “r” means “read” and will open a file as input wherein data is to be retrieved. “w” means “write”, and will open a file for output. Previous data that was stored on that file will be erased."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator \\0 is placed after the last character."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Ans: It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."}},{"data":{"ques":" What is the use of a semicolon (;) at the end of every program statement?","ans":"Related Interview Questions..."}}]